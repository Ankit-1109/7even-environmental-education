{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\n7even is a gamified environmental education platform that combines interactive learning, real-world missions, and social collaboration to teach environmental science and encourage sustainable actions. The platform uses experience points (XP), EcoCredits, achievements, and guild-based teamwork to motivate users to learn about topics like biodiversity, climate science, waste management, and green innovation while taking measurable real-world environmental actions.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Technology Stack**: React.js with TypeScript, using Vite as the build tool and Wouter for client-side routing. The UI is built with shadcn/ui components using Tailwind CSS for styling.\n\n**Component Structure**: The frontend follows a component-based architecture with reusable UI components for cards, forms, navigation, and specialized environmental education features like AR scanning simulation and ecosystem simulation interfaces.\n\n**State Management**: Uses TanStack Query (React Query) for server state management, with custom hooks for authentication and user data. Local state is managed with React hooks.\n\n**Progressive Web App**: Configured as a PWA with manifest.json for mobile app-like experience, including offline capabilities and mobile navigation.\n\n## Backend Architecture\n\n**Framework**: Node.js with Express.js server, using ESM modules and TypeScript for type safety.\n\n**Authentication**: Replit Auth integration using OpenID Connect with Passport.js strategies. Session management uses PostgreSQL-backed sessions with connect-pg-simple.\n\n**API Design**: RESTful API structure with route handlers for user management, learning content, missions, guilds, achievements, and progress tracking.\n\n**Database Abstraction**: Uses Drizzle ORM with a storage interface pattern that abstracts database operations, making it easy to swap implementations while maintaining consistent API.\n\n## Data Storage Architecture\n\n**Primary Database**: PostgreSQL with Neon serverless driver for production scalability.\n\n**ORM**: Drizzle ORM with schema-first approach, using migrations for database versioning.\n\n**Schema Design**: Structured around core entities including users, lessons, missions, guilds, achievements, user progress, leaderboards, and eco actions. Includes enum types for tracks, difficulty levels, and mission statuses.\n\n**Session Storage**: PostgreSQL-backed session storage for authentication persistence.\n\n## Gamification System\n\n**Experience System**: XP-based progression with levels, where users earn points from completing lessons, missions, and real-world eco actions.\n\n**Reward Mechanisms**: EcoCredits as virtual currency earned through environmental actions, achievements with badge system, and leaderboards for competitive elements.\n\n**Learning Tracks**: Four specialized learning paths - EcoExplorer (biodiversity), ClimateChampion (climate science), WasteWarrior (waste management), and GreenInnovator (sustainable technology).\n\n**Social Features**: Guild system for collaborative learning and team challenges, with member management and progress tracking.\n\n# External Dependencies\n\n**Database Services**: \n- Neon PostgreSQL for serverless database hosting\n- Database connection pooling for performance\n\n**Authentication Services**:\n- Replit Auth using OpenID Connect\n- Passport.js for authentication strategies\n\n**UI Framework**:\n- Radix UI primitives for accessible components\n- shadcn/ui component library\n- Tailwind CSS for styling\n- Lucide React for icons\n\n**Development Tools**:\n- Vite for build tooling and development server\n- TypeScript for type safety\n- ESBuild for production bundling\n- PostCSS with Autoprefixer\n\n**Runtime Dependencies**:\n- TanStack React Query for data fetching and caching\n- Wouter for lightweight client-side routing\n- React Hook Form with Zod for form validation\n- Date-fns for date manipulation\n- Class Variance Authority for component variants\n\n**Development Environment**:\n- Replit-specific plugins for development experience\n- Runtime error overlay for debugging\n- Development banner and cartographer for Replit integration","size_bytes":4202},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          \"0%, 100%\": {\n            transform: \"translateY(0px)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-10px)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"float\": \"float 3s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2988},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertLessonSchema, insertMissionSchema, insertEcoActionSchema } from \"@shared/schema\";\nimport { AIRecommendationEngine } from \"./ai-recommendations\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard API\n  app.get('/api/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const achievements = await storage.getUserAchievements(userId);\n      const missions = await storage.getUserMissions(userId);\n      const progress = await storage.getUserProgress(userId);\n      \n      // Get track progress\n      const tracks = [\"EcoExplorer\", \"ClimateChampion\", \"WasteWarrior\", \"GreenInnovator\"];\n      const trackProgress = await Promise.all(\n        tracks.map(async (track) => {\n          const prog = await storage.getTrackProgress(userId, track);\n          return { track, ...prog };\n        })\n      );\n\n      res.json({\n        user,\n        achievements: achievements.slice(0, 4), // Recent achievements\n        missions,\n        trackProgress,\n        recentProgress: progress.slice(-5),\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Lessons API\n  app.get('/api/lessons', async (req, res) => {\n    try {\n      const { track } = req.query;\n      const lessons = track \n        ? await storage.getLessonsByTrack(track as string)\n        : await storage.getAllLessons();\n      res.json(lessons);\n    } catch (error) {\n      console.error(\"Error fetching lessons:\", error);\n      res.status(500).json({ message: \"Failed to fetch lessons\" });\n    }\n  });\n\n  app.get('/api/lessons/:id', async (req, res) => {\n    try {\n      const lesson = await storage.getLesson(parseInt(req.params.id));\n      if (!lesson) {\n        return res.status(404).json({ message: \"Lesson not found\" });\n      }\n      res.json(lesson);\n    } catch (error) {\n      console.error(\"Error fetching lesson:\", error);\n      res.status(500).json({ message: \"Failed to fetch lesson\" });\n    }\n  });\n\n  // Progress API\n  app.post('/api/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { lessonId, completed, score } = req.body;\n      \n      const progress = await storage.updateProgress({\n        userId,\n        lessonId: parseInt(lessonId),\n        completed,\n        score,\n        completedAt: completed ? new Date() : undefined,\n      });\n\n      if (completed) {\n        const lesson = await storage.getLesson(parseInt(lessonId));\n        if (lesson) {\n          // Award XP and credits\n          await storage.updateUserXP(userId, lesson.xpReward || 0);\n          await storage.updateUserCredits(userId, lesson.creditReward || 0);\n          \n          // Check for achievements\n          await checkLessonAchievements(userId, lesson.track);\n        }\n      }\n\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error updating progress:\", error);\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  app.get('/api/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const progress = await storage.getUserProgress(userId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch progress\" });\n    }\n  });\n\n  // Achievements API\n  app.get('/api/achievements', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const achievements = await storage.getUserAchievements(userId);\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  // Missions API\n  app.get('/api/missions', async (req, res) => {\n    try {\n      const missions = await storage.getActiveMissions();\n      res.json(missions);\n    } catch (error) {\n      console.error(\"Error fetching missions:\", error);\n      res.status(500).json({ message: \"Failed to fetch missions\" });\n    }\n  });\n\n  app.post('/api/missions/:id/start', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const missionId = parseInt(req.params.id);\n      \n      const userMission = await storage.startMission({\n        userId,\n        missionId,\n        status: \"in_progress\",\n      });\n\n      res.json(userMission);\n    } catch (error) {\n      console.error(\"Error starting mission:\", error);\n      res.status(500).json({ message: \"Failed to start mission\" });\n    }\n  });\n\n  app.put('/api/missions/:id/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const missionId = parseInt(req.params.id);\n      const { progress } = req.body;\n      \n      await storage.updateMissionProgress(userId, missionId, progress);\n      \n      if (progress >= 100) {\n        await storage.completeMission(userId, missionId);\n        const mission = await storage.getActiveMissions().then(missions => \n          missions.find(m => m.id === missionId)\n        );\n        if (mission) {\n          await storage.updateUserXP(userId, mission.xpReward || 0);\n          await storage.updateUserCredits(userId, mission.creditReward || 0);\n        }\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating mission progress:\", error);\n      res.status(500).json({ message: \"Failed to update mission progress\" });\n    }\n  });\n\n  // Leaderboard API\n  app.get('/api/leaderboard', async (req, res) => {\n    try {\n      const { period = 'weekly' } = req.query;\n      const leaderboard = await storage.getLeaderboard(period as string);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // Guild API\n  app.get('/api/guilds', async (req, res) => {\n    try {\n      // For now, return all guilds from database\n      // In a real app, you might want to filter or paginate\n      const { guilds } = await import('@shared/schema');\n      const { db } = await import('./db');\n      const allGuilds = await db.select().from(guilds);\n      res.json(allGuilds);\n    } catch (error) {\n      console.error(\"Error fetching guilds:\", error);\n      res.status(500).json({ message: \"Failed to fetch guilds\" });\n    }\n  });\n\n  app.get('/api/guild/:id', async (req, res) => {\n    try {\n      const guild = await storage.getGuild(req.params.id);\n      if (!guild) {\n        return res.status(404).json({ message: \"Guild not found\" });\n      }\n      \n      const members = await storage.getGuildMembers(req.params.id);\n      res.json({ ...guild, members });\n    } catch (error) {\n      console.error(\"Error fetching guild:\", error);\n      res.status(500).json({ message: \"Failed to fetch guild\" });\n    }\n  });\n\n  app.post('/api/guild/:id/join', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const guildId = req.params.id;\n      \n      await storage.joinGuild(userId, guildId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error joining guild:\", error);\n      res.status(500).json({ message: \"Failed to join guild\" });\n    }\n  });\n\n  // Eco Actions API\n  app.post('/api/eco-actions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      let actionData = { ...req.body, userId };\n      \n      // Server-side reward calculation for AR scans\n      if (actionData.type === 'ar_scan' && actionData.confidence) {\n        const confidence = Math.max(0, Math.min(1, actionData.confidence)); // Clamp 0-1\n        actionData.xpEarned = Math.max(25, Math.round(confidence * 50));\n        actionData.creditsEarned = Math.max(10, Math.round(confidence * 25));\n      }\n      \n      // Set default rewards for other action types if not specified\n      if (!actionData.xpEarned) {\n        actionData.xpEarned = actionData.type === 'simulation_action' ? 75 : 25;\n      }\n      if (!actionData.creditsEarned) {\n        actionData.creditsEarned = actionData.type === 'simulation_action' ? 15 : 10;\n      }\n      \n      const validatedData = insertEcoActionSchema.parse(actionData);\n      const action = await storage.createEcoAction(validatedData);\n      \n      // Award XP and credits for eco actions\n      if ((action.xpEarned || 0) > 0) {\n        await storage.updateUserXP(userId, action.xpEarned || 0);\n      }\n      if ((action.creditsEarned || 0) > 0) {\n        await storage.updateUserCredits(userId, action.creditsEarned || 0);\n      }\n\n      res.json(action);\n    } catch (error) {\n      console.error(\"Error creating eco action:\", error);\n      res.status(500).json({ message: \"Failed to create eco action\" });\n    }\n  });\n\n  app.get('/api/eco-actions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const actions = await storage.getUserEcoActions(userId);\n      res.json(actions);\n    } catch (error) {\n      console.error(\"Error fetching eco actions:\", error);\n      res.status(500).json({ message: \"Failed to fetch eco actions\" });\n    }\n  });\n\n  // Simulation API\n  app.post('/api/simulation/action', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { actionType, impact } = req.body;\n      \n      // Create eco action for simulation\n      const action = await storage.createEcoAction({\n        userId,\n        type: \"simulation_action\",\n        description: `Simulation: ${actionType}`,\n        xpEarned: impact * 10,\n        creditsEarned: impact * 2,\n      });\n\n      await storage.updateUserXP(userId, action.xpEarned || 0);\n      await storage.updateUserCredits(userId, action.creditsEarned || 0);\n\n      res.json({ action, xpEarned: action.xpEarned, creditsEarned: action.creditsEarned });\n    } catch (error) {\n      console.error(\"Error processing simulation action:\", error);\n      res.status(500).json({ message: \"Failed to process simulation action\" });\n    }\n  });\n\n  // Blockchain API Routes\n  app.post('/api/blockchain/connect-wallet', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { walletAddress } = req.body;\n      \n      // Validate wallet address format\n      if (!walletAddress || !/^0x[a-fA-F0-9]{40}$/.test(walletAddress)) {\n        return res.status(400).json({ message: \"Invalid wallet address\" });\n      }\n\n      await storage.updateUserWallet(userId, walletAddress);\n      res.json({ success: true, walletAddress });\n    } catch (error) {\n      console.error(\"Error connecting wallet:\", error);\n      res.status(500).json({ message: \"Failed to connect wallet\" });\n    }\n  });\n\n  app.post('/api/blockchain/mint-credits', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { amount, transactionHash, toAddress } = req.body;\n      \n      // Create blockchain transaction record\n      const transaction = await storage.createBlockchainTransaction({\n        userId,\n        transactionHash,\n        blockchainNetwork: 'polygon',\n        transactionType: 'mint_credits',\n        amount: parseFloat(amount),\n        status: 'pending',\n        toAddress,\n        fromAddress: toAddress, // For minting, from and to are same\n      });\n\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error recording credit mint:\", error);\n      res.status(500).json({ message: \"Failed to record credit mint\" });\n    }\n  });\n\n  app.post('/api/blockchain/mint-nft', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { transactionHash, metadata, contractAddress, achievementId } = req.body;\n      \n      // Create blockchain transaction record\n      const transaction = await storage.createBlockchainTransaction({\n        userId,\n        transactionHash,\n        blockchainNetwork: 'polygon',\n        transactionType: 'mint_nft',\n        amount: 0,\n        status: 'pending',\n        toAddress: contractAddress,\n        fromAddress: metadata.recipientAddress,\n      });\n\n      // Create NFT certificate record\n      const nft = await storage.createNftCertificate({\n        userId,\n        tokenId: '', // Will be updated when transaction confirms\n        contractAddress,\n        nftType: metadata.type || 'achievement',\n        title: metadata.title,\n        description: metadata.description,\n        metadata,\n        imageUrl: metadata.image,\n        blockchainNetwork: 'polygon',\n        transactionHash,\n        achievementId: achievementId ? parseInt(achievementId) : undefined,\n      });\n\n      res.json({ transaction, nft });\n    } catch (error) {\n      console.error(\"Error recording NFT mint:\", error);\n      res.status(500).json({ message: \"Failed to record NFT mint\" });\n    }\n  });\n\n  app.post('/api/blockchain/confirm-transaction', isAuthenticated, async (req: any, res) => {\n    try {\n      const { transactionHash, receipt } = req.body;\n      \n      const status = receipt.status === 1 ? 'confirmed' : 'failed';\n      await storage.updateTransactionStatus(transactionHash, status, receipt);\n      \n      // If it was an NFT mint and successful, update tokenId\n      if (status === 'confirmed' && receipt.logs && receipt.logs.length > 0) {\n        // Parse logs to extract tokenId (simplified - in reality you'd parse the Transfer event)\n        const tokenId = receipt.logs[0].topics[3]; // This is simplified\n        if (tokenId) {\n          await storage.updateNftTokenId(transactionHash, tokenId);\n        }\n      }\n\n      res.json({ success: true, status });\n    } catch (error) {\n      console.error(\"Error confirming transaction:\", error);\n      res.status(500).json({ message: \"Failed to confirm transaction\" });\n    }\n  });\n\n  app.get('/api/blockchain/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const transactions = await storage.getUserTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get('/api/blockchain/nfts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const nfts = await storage.getUserNfts(userId);\n      res.json(nfts);\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n      res.status(500).json({ message: \"Failed to fetch NFTs\" });\n    }\n  });\n\n  app.get('/api/blockchain/pools', async (req, res) => {\n    try {\n      const pools = await storage.getBlockchainPools();\n      res.json(pools);\n    } catch (error) {\n      console.error(\"Error fetching blockchain pools:\", error);\n      res.status(500).json({ message: \"Failed to fetch blockchain pools\" });\n    }\n  });\n\n  app.post('/api/blockchain/stake', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { poolId, amount, transactionHash } = req.body;\n      \n      const transaction = await storage.createBlockchainTransaction({\n        userId,\n        transactionHash,\n        blockchainNetwork: 'polygon',\n        transactionType: 'stake_credits',\n        amount: parseFloat(amount),\n        status: 'pending',\n        toAddress: '', // Pool contract address would be set here\n        fromAddress: '', // User wallet would be set here\n      });\n\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error recording stake:\", error);\n      res.status(500).json({ message: \"Failed to record stake\" });\n    }\n  });\n\n  // Initialize AI Recommendation Engine\n  const aiEngine = new AIRecommendationEngine(storage);\n\n  // AI Recommendations API\n  app.get('/api/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const recommendations = await aiEngine.generatePersonalizedRecommendations(userId);\n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error generating recommendations:\", error);\n      res.status(500).json({ message: \"Failed to generate recommendations\" });\n    }\n  });\n\n  app.get('/api/learning-profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await aiEngine.generateUserLearningProfile(userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error generating learning profile:\", error);\n      res.status(500).json({ message: \"Failed to generate learning profile\" });\n    }\n  });\n\n  app.get('/api/adaptive-difficulty/:contentType', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { contentType } = req.params;\n      const difficulty = await aiEngine.getAdaptiveDifficulty(userId, contentType);\n      res.json({ difficulty });\n    } catch (error) {\n      console.error(\"Error determining adaptive difficulty:\", error);\n      res.status(500).json({ message: \"Failed to determine difficulty\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to check for lesson-based achievements\nasync function checkLessonAchievements(userId: string, track: string) {\n  const userProgress = await storage.getUserProgress(userId);\n  const completedCount = userProgress.filter(p => p.completed).length;\n\n  // First lesson achievement\n  if (completedCount === 1) {\n    await storage.createAchievement({\n      userId,\n      type: \"first_lesson\",\n      title: \"First Steps\",\n      description: \"Completed your first lesson\",\n      xpReward: 100,\n      creditReward: 25,\n    });\n  }\n\n  // Track completion achievements\n  const trackProgress = await storage.getTrackProgress(userId, track);\n  if (trackProgress.completed === trackProgress.total && trackProgress.total > 0) {\n    await storage.createAchievement({\n      userId,\n      type: \"track_complete\",\n      title: `${track} Master`,\n      description: `Completed all lessons in ${track} track`,\n      xpReward: 500,\n      creditReward: 100,\n    });\n  }\n\n  // Level up check\n  const user = await storage.getUser(userId);\n  if (user) {\n    const newLevel = Math.floor((user.xp || 0) / 1000) + 1;\n    if (newLevel > (user.level || 1)) {\n      await storage.levelUpUser(userId);\n      await storage.createAchievement({\n        userId,\n        type: \"level_up\",\n        title: `Level ${newLevel}`,\n        description: `Reached level ${newLevel}`,\n        xpReward: 200,\n        creditReward: 50,\n      });\n    }\n  }\n}\n","size_bytes":19542},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { lessons, missions, guilds, type InsertLesson, type InsertMission, type InsertGuild } from \"@shared/schema\";\n\nconst sampleLessons: InsertLesson[] = [\n  // EcoExplorer Track\n  {\n    title: \"Understanding Ecosystems\",\n    description: \"Learn about the interconnected web of life and how organisms depend on each other.\",\n    content: \"Ecosystems are complex networks where every organism plays a vital role. From producers to decomposers, each level of the food chain contributes to the balance of nature.\",\n    track: \"EcoExplorer\",\n    difficulty: \"beginner\",\n    xpReward: 100,\n    estimatedMinutes: 15,\n    order: 1,\n  },\n  {\n    title: \"Biodiversity Hotspots\",\n    description: \"Explore the world's most biodiverse regions and understand why they need protection.\",\n    content: \"Biodiversity hotspots contain exceptional levels of plant and animal species that are found nowhere else on Earth. These areas face severe threats from human activities.\",\n    track: \"EcoExplorer\",\n    difficulty: \"intermediate\",\n    xpReward: 150,\n    estimatedMinutes: 20,\n    order: 2,\n  },\n  {\n    title: \"Marine Conservation\",\n    description: \"Discover the importance of protecting our oceans and marine life.\",\n    content: \"Our oceans cover 71% of the Earth's surface and contain 99% of the living space on our planet. Marine ecosystems face threats from pollution, overfishing, and climate change.\",\n    track: \"EcoExplorer\",\n    difficulty: \"advanced\",\n    xpReward: 200,\n    estimatedMinutes: 25,\n    order: 3,\n  },\n\n  // ClimateChampion Track\n  {\n    title: \"Climate Science Basics\",\n    description: \"Understand the greenhouse effect and how human activities influence climate.\",\n    content: \"The greenhouse effect is a natural process that keeps Earth warm enough to support life. However, human activities have intensified this effect, leading to climate change.\",\n    track: \"ClimateChampion\",\n    difficulty: \"beginner\",\n    xpReward: 100,\n    estimatedMinutes: 18,\n    order: 1,\n  },\n  {\n    title: \"Renewable Energy Solutions\",\n    description: \"Learn about clean energy technologies and their role in fighting climate change.\",\n    content: \"Renewable energy sources like solar, wind, and hydroelectric power offer sustainable alternatives to fossil fuels, reducing greenhouse gas emissions.\",\n    track: \"ClimateChampion\",\n    difficulty: \"intermediate\",\n    xpReward: 150,\n    estimatedMinutes: 22,\n    order: 2,\n  },\n  {\n    title: \"Carbon Footprint Reduction\",\n    description: \"Discover practical ways to reduce your personal carbon footprint.\",\n    content: \"Every action has a carbon footprint. Learn how transportation choices, energy use, and consumption habits contribute to greenhouse gas emissions.\",\n    track: \"ClimateChampion\",\n    difficulty: \"intermediate\",\n    xpReward: 150,\n    estimatedMinutes: 20,\n    order: 3,\n  },\n\n  // WasteWarrior Track\n  {\n    title: \"The 3 R's: Reduce, Reuse, Recycle\",\n    description: \"Master the fundamental principles of waste reduction.\",\n    content: \"The waste hierarchy prioritizes reducing consumption first, then reusing items, and finally recycling materials. This approach minimizes environmental impact.\",\n    track: \"WasteWarrior\",\n    difficulty: \"beginner\",\n    xpReward: 100,\n    estimatedMinutes: 12,\n    order: 1,\n  },\n  {\n    title: \"Composting and Organic Waste\",\n    description: \"Learn how to turn food scraps into valuable compost.\",\n    content: \"Composting is nature's way of recycling organic matter. It reduces methane emissions from landfills and creates nutrient-rich soil amendment.\",\n    track: \"WasteWarrior\",\n    difficulty: \"beginner\",\n    xpReward: 120,\n    estimatedMinutes: 15,\n    order: 2,\n  },\n  {\n    title: \"Zero Waste Lifestyle\",\n    description: \"Explore strategies for minimizing waste in daily life.\",\n    content: \"Zero waste is a philosophy that encourages redesigning resource use to reduce waste to zero. It involves refusing, reducing, reusing, recycling, and composting.\",\n    track: \"WasteWarrior\",\n    difficulty: \"advanced\",\n    xpReward: 200,\n    estimatedMinutes: 30,\n    order: 3,\n  },\n\n  // GreenInnovator Track\n  {\n    title: \"Sustainable Technology\",\n    description: \"Discover how technology can solve environmental challenges.\",\n    content: \"Green technology encompasses innovations that reduce environmental impact, from electric vehicles to smart grid systems and green building technologies.\",\n    track: \"GreenInnovator\",\n    difficulty: \"intermediate\",\n    xpReward: 150,\n    estimatedMinutes: 25,\n    order: 1,\n  },\n  {\n    title: \"Circular Economy Principles\",\n    description: \"Learn about designing out waste and keeping materials in use.\",\n    content: \"The circular economy is a model that designs out waste and pollution, keeps products and materials in use, and regenerates natural systems.\",\n    track: \"GreenInnovator\",\n    difficulty: \"advanced\",\n    xpReward: 180,\n    estimatedMinutes: 28,\n    order: 2,\n  },\n  {\n    title: \"Environmental Entrepreneurship\",\n    description: \"Explore how to build businesses that benefit the planet.\",\n    content: \"Environmental entrepreneurship involves creating businesses that generate profit while solving environmental problems and creating positive impact.\",\n    track: \"GreenInnovator\",\n    difficulty: \"advanced\",\n    xpReward: 220,\n    estimatedMinutes: 35,\n    order: 3,\n  },\n];\n\nconst sampleMissions: InsertMission[] = [\n  {\n    title: \"Tree Planting Challenge\",\n    description: \"Plant 5 trees in your community and document the process with photos.\",\n    type: \"action\",\n    xpReward: 500,\n    ecoCreditsReward: 50,\n    requirementType: \"photo_upload\",\n    requirementValue: \"5\",\n    isActive: true,\n  },\n  {\n    title: \"Plastic-Free Week\",\n    description: \"Go an entire week without using single-use plastics. Track your alternatives.\",\n    type: \"challenge\",\n    xpReward: 300,\n    ecoCreditsReward: 30,\n    requirementType: \"duration\",\n    requirementValue: \"7\",\n    isActive: true,\n  },\n  {\n    title: \"Energy Audit Master\",\n    description: \"Complete energy audits of 3 different buildings and suggest improvements.\",\n    type: \"research\",\n    xpReward: 400,\n    ecoCreditsReward: 40,\n    requirementType: \"report\",\n    requirementValue: \"3\",\n    isActive: true,\n  },\n  {\n    title: \"Community Clean-Up Leader\",\n    description: \"Organize and lead a community clean-up event with at least 10 participants.\",\n    type: \"community\",\n    xpReward: 600,\n    ecoCreditsReward: 60,\n    requirementType: \"event\",\n    requirementValue: \"10\",\n    isActive: true,\n  },\n  {\n    title: \"Sustainable Transport Champion\",\n    description: \"Use only sustainable transportation (walking, cycling, public transport) for 2 weeks.\",\n    type: \"challenge\",\n    xpReward: 350,\n    ecoCreditsReward: 35,\n    requirementType: \"duration\",\n    requirementValue: \"14\",\n    isActive: true,\n  },\n  {\n    title: \"Water Conservation Expert\",\n    description: \"Implement 5 water-saving measures at home and track your water usage reduction.\",\n    type: \"action\",\n    xpReward: 250,\n    ecoCreditsReward: 25,\n    requirementType: \"measurement\",\n    requirementValue: \"5\",\n    isActive: true,\n  },\n];\n\nconst sampleGuilds: InsertGuild[] = [\n  {\n    id: \"eco-warriors\",\n    name: \"Eco Warriors\",\n    description: \"A guild for passionate environmental activists working to protect our planet through direct action and advocacy.\",\n    memberCount: 42,\n    currentChallenge: \"Plant 1000 trees by end of month\",\n    challengeProgress: 487,\n    challengeTarget: 1000,\n  },\n  {\n    id: \"green-innovators\",\n    name: \"Green Innovators\",\n    description: \"Focused on developing and promoting sustainable technologies and innovative solutions to environmental challenges.\",\n    memberCount: 38,\n    currentChallenge: \"Develop 5 green tech prototypes\",\n    challengeProgress: 3,\n    challengeTarget: 5,\n  },\n  {\n    id: \"climate-defenders\",\n    name: \"Climate Defenders\",\n    description: \"Dedicated to climate action, renewable energy advocacy, and reducing carbon footprints in our communities.\",\n    memberCount: 55,\n    currentChallenge: \"Reduce guild carbon footprint by 20%\",\n    challengeProgress: 14,\n    challengeTarget: 20,\n  },\n  {\n    id: \"waste-eliminators\",\n    name: \"Waste Eliminators\",\n    description: \"Specialists in waste reduction, recycling initiatives, and promoting circular economy principles.\",\n    memberCount: 31,\n    currentChallenge: \"Achieve zero waste lifestyle for 100 days\",\n    challengeProgress: 67,\n    challengeTarget: 100,\n  },\n];\n\nexport async function seedDatabase() {\n  console.log(\"🌱 Starting database seeding...\");\n\n  try {\n    // Seed lessons\n    console.log(\"📚 Seeding lessons...\");\n    await db.insert(lessons).values(sampleLessons).onConflictDoNothing();\n\n    // Seed missions\n    console.log(\"🎯 Seeding missions...\");\n    await db.insert(missions).values(sampleMissions).onConflictDoNothing();\n\n    // Seed guilds\n    console.log(\"🏛️ Seeding guilds...\");\n    await db.insert(guilds).values(sampleGuilds).onConflictDoNothing();\n\n    console.log(\"✅ Database seeding completed successfully!\");\n    return true;\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    return false;\n  }\n}\n\n// Run seeding if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase().then(() => process.exit(0));\n}","size_bytes":9402},"server/storage.ts":{"content":"import {\n  users,\n  guilds,\n  lessons,\n  userProgress,\n  achievements,\n  missions,\n  userMissions,\n  leaderboardEntries,\n  ecoActions,\n  // Blockchain tables\n  blockchainTransactions,\n  nftCertificates,\n  blockchainPools,\n  // Types\n  type User,\n  type UpsertUser,\n  type Guild,\n  type Lesson,\n  type UserProgress,\n  type Achievement,\n  type Mission,\n  type UserMission,\n  type LeaderboardEntry,\n  type EcoAction,\n  type BlockchainTransaction,\n  type NftCertificate,\n  type BlockchainPool,\n  type InsertLesson,\n  type InsertAchievement,\n  type InsertMission,\n  type InsertUserProgress,\n  type InsertUserMission,\n  type InsertEcoAction,\n  type InsertGuild,\n  type InsertBlockchainTransaction,\n  type InsertNftCertificate,\n  type InsertBlockchainPool,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, count } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserXP(userId: string, xp: number): Promise<void>;\n  updateUserCredits(userId: string, credits: number): Promise<void>;\n  levelUpUser(userId: string): Promise<void>;\n  \n  // Guild operations\n  getGuild(id: string): Promise<Guild | undefined>;\n  createGuild(guild: InsertGuild): Promise<Guild>;\n  joinGuild(userId: string, guildId: string): Promise<void>;\n  getGuildMembers(guildId: string): Promise<User[]>;\n  \n  // Lesson operations\n  getAllLessons(): Promise<Lesson[]>;\n  getLessonsByTrack(track: string): Promise<Lesson[]>;\n  getLesson(id: number): Promise<Lesson | undefined>;\n  \n  // Progress operations\n  getUserProgress(userId: string): Promise<UserProgress[]>;\n  updateProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  getTrackProgress(userId: string, track: string): Promise<{ completed: number; total: number }>;\n  \n  // Achievement operations\n  getUserAchievements(userId: string): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n  \n  // Mission operations\n  getActiveMissions(): Promise<Mission[]>;\n  getUserMissions(userId: string): Promise<UserMission[]>;\n  startMission(userMission: InsertUserMission): Promise<UserMission>;\n  updateMissionProgress(userId: string, missionId: number, progress: number): Promise<void>;\n  completeMission(userId: string, missionId: number): Promise<void>;\n  \n  // Leaderboard operations\n  getLeaderboard(period: string, limit?: number): Promise<LeaderboardEntry[]>;\n  updateLeaderboard(userId: string, period: string): Promise<void>;\n  \n  // Eco Actions\n  createEcoAction(action: InsertEcoAction): Promise<EcoAction>;\n  getUserEcoActions(userId: string): Promise<EcoAction[]>;\n  \n  // Blockchain operations\n  createBlockchainTransaction(transaction: InsertBlockchainTransaction): Promise<BlockchainTransaction>;\n  updateTransactionStatus(txHash: string, status: string, receipt?: any): Promise<void>;\n  getUserTransactions(userId: string): Promise<BlockchainTransaction[]>;\n  updateUserWallet(userId: string, walletAddress: string): Promise<void>;\n  updatePolygonCredits(userId: string, credits: number): Promise<void>;\n  \n  // NFT operations\n  createNftCertificate(nft: InsertNftCertificate): Promise<NftCertificate>;\n  getUserNfts(userId: string): Promise<NftCertificate[]>;\n  updateNftTokenId(transactionHash: string, tokenId: string): Promise<void>;\n  \n  // Blockchain pools\n  getBlockchainPools(): Promise<BlockchainPool[]>;\n  createBlockchainPool(pool: InsertBlockchainPool): Promise<BlockchainPool>;\n  updatePoolStats(poolId: number, totalCredits: number, totalUsers: number): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserXP(userId: string, xp: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        xp: sql`${users.xp} + ${xp}`,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserCredits(userId: string, credits: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        ecoCredits: sql`${users.ecoCredits} + ${credits}`,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async levelUpUser(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        level: sql`${users.level} + 1`,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Guild operations\n  async getGuild(id: string): Promise<Guild | undefined> {\n    const [guild] = await db.select().from(guilds).where(eq(guilds.id, id));\n    return guild;\n  }\n\n  async createGuild(guild: InsertGuild): Promise<Guild> {\n    const [newGuild] = await db.insert(guilds).values(guild).returning();\n    return newGuild;\n  }\n\n  async joinGuild(userId: string, guildId: string): Promise<void> {\n    await db.update(users).set({ guildId }).where(eq(users.id, userId));\n    await db\n      .update(guilds)\n      .set({ memberCount: sql`${guilds.memberCount} + 1` })\n      .where(eq(guilds.id, guildId));\n  }\n\n  async getGuildMembers(guildId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.guildId, guildId));\n  }\n\n  // Lesson operations\n  async getAllLessons(): Promise<Lesson[]> {\n    return await db.select().from(lessons).orderBy(lessons.id);\n  }\n\n  async getLessonsByTrack(track: string): Promise<Lesson[]> {\n    return await db.select().from(lessons).where(eq(lessons.track, track as any));\n  }\n\n  async getLesson(id: number): Promise<Lesson | undefined> {\n    const [lesson] = await db.select().from(lessons).where(eq(lessons.id, id));\n    return lesson;\n  }\n\n  // Progress operations\n  async getUserProgress(userId: string): Promise<UserProgress[]> {\n    return await db.select().from(userProgress).where(eq(userProgress.userId, userId));\n  }\n\n  async updateProgress(progress: InsertUserProgress): Promise<UserProgress> {\n    const [updatedProgress] = await db\n      .insert(userProgress)\n      .values(progress)\n      .onConflictDoUpdate({\n        target: [userProgress.userId, userProgress.lessonId],\n        set: progress,\n      })\n      .returning();\n    return updatedProgress;\n  }\n\n  async getTrackProgress(userId: string, track: string): Promise<{ completed: number; total: number }> {\n    const trackLessons = await this.getLessonsByTrack(track);\n    const userProg = await db\n      .select()\n      .from(userProgress)\n      .where(\n        and(\n          eq(userProgress.userId, userId),\n          eq(userProgress.completed, true)\n        )\n      );\n    \n    const completedLessonIds = new Set(userProg.map(p => p.lessonId));\n    const completed = trackLessons.filter(l => completedLessonIds.has(l.id)).length;\n    \n    return { completed, total: trackLessons.length };\n  }\n\n  // Achievement operations\n  async getUserAchievements(userId: string): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.userId, userId))\n      .orderBy(desc(achievements.unlockedAt));\n  }\n\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    const [newAchievement] = await db.insert(achievements).values(achievement).returning();\n    return newAchievement;\n  }\n\n  // Mission operations\n  async getActiveMissions(): Promise<Mission[]> {\n    return await db\n      .select()\n      .from(missions)\n      .where(eq(missions.isActive, true))\n      .orderBy(missions.createdAt);\n  }\n\n  async getUserMissions(userId: string): Promise<UserMission[]> {\n    return await db.select().from(userMissions).where(eq(userMissions.userId, userId));\n  }\n\n  async startMission(userMission: InsertUserMission): Promise<UserMission> {\n    const [newUserMission] = await db.insert(userMissions).values({\n      ...userMission,\n      status: \"in_progress\",\n      startedAt: new Date(),\n    }).returning();\n    return newUserMission;\n  }\n\n  async updateMissionProgress(userId: string, missionId: number, progress: number): Promise<void> {\n    await db\n      .update(userMissions)\n      .set({ progress })\n      .where(\n        and(\n          eq(userMissions.userId, userId),\n          eq(userMissions.missionId, missionId)\n        )\n      );\n  }\n\n  async completeMission(userId: string, missionId: number): Promise<void> {\n    await db\n      .update(userMissions)\n      .set({ \n        status: \"completed\",\n        progress: 100,\n        completedAt: new Date()\n      })\n      .where(\n        and(\n          eq(userMissions.userId, userId),\n          eq(userMissions.missionId, missionId)\n        )\n      );\n  }\n\n  // Leaderboard operations\n  async getLeaderboard(period: string, limit: number = 10): Promise<LeaderboardEntry[]> {\n    return await db\n      .select()\n      .from(leaderboardEntries)\n      .where(eq(leaderboardEntries.period, period))\n      .orderBy(leaderboardEntries.rank)\n      .limit(limit);\n  }\n\n  async updateLeaderboard(userId: string, period: string): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) return;\n\n    await db\n      .insert(leaderboardEntries)\n      .values({\n        userId,\n        period,\n        xp: user.xp,\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: [leaderboardEntries.userId, leaderboardEntries.period],\n        set: {\n          xp: user.xp,\n          updatedAt: new Date(),\n        },\n      });\n\n    // Update ranks for this period\n    await db.execute(sql`\n      UPDATE leaderboard_entries \n      SET rank = ranking.rank \n      FROM (\n        SELECT user_id, ROW_NUMBER() OVER (ORDER BY xp DESC) as rank\n        FROM leaderboard_entries \n        WHERE period = ${period}\n      ) ranking \n      WHERE leaderboard_entries.user_id = ranking.user_id \n      AND leaderboard_entries.period = ${period}\n    `);\n  }\n\n  // Eco Actions\n  async createEcoAction(action: InsertEcoAction): Promise<EcoAction> {\n    const [newAction] = await db.insert(ecoActions).values(action).returning();\n    return newAction;\n  }\n\n  async getUserEcoActions(userId: string): Promise<EcoAction[]> {\n    return await db\n      .select()\n      .from(ecoActions)\n      .where(eq(ecoActions.userId, userId))\n      .orderBy(desc(ecoActions.createdAt));\n  }\n\n  // Blockchain operations\n  async createBlockchainTransaction(transaction: InsertBlockchainTransaction): Promise<BlockchainTransaction> {\n    const [newTransaction] = await db.insert(blockchainTransactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async updateTransactionStatus(txHash: string, status: string, receipt?: any): Promise<void> {\n    const updateData: any = { \n      status: status as \"pending\" | \"confirmed\" | \"failed\",\n    };\n    \n    if (receipt) {\n      updateData.blockNumber = receipt.blockNumber;\n      updateData.gasUsed = receipt.gasUsed?.toString();\n      updateData.confirmedAt = new Date();\n    }\n\n    await db\n      .update(blockchainTransactions)\n      .set(updateData)\n      .where(eq(blockchainTransactions.transactionHash, txHash));\n  }\n\n  async getUserTransactions(userId: string): Promise<BlockchainTransaction[]> {\n    return await db\n      .select()\n      .from(blockchainTransactions)\n      .where(eq(blockchainTransactions.userId, userId))\n      .orderBy(desc(blockchainTransactions.createdAt));\n  }\n\n  async updateUserWallet(userId: string, walletAddress: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ walletAddress })\n      .where(eq(users.id, userId));\n  }\n\n  async updatePolygonCredits(userId: string, credits: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        polygonCredits: sql`polygon_credits + ${credits}`\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // NFT operations\n  async createNftCertificate(nft: InsertNftCertificate): Promise<NftCertificate> {\n    const [newNft] = await db.insert(nftCertificates).values(nft).returning();\n    return newNft;\n  }\n\n  async getUserNfts(userId: string): Promise<NftCertificate[]> {\n    return await db\n      .select()\n      .from(nftCertificates)\n      .where(eq(nftCertificates.userId, userId))\n      .orderBy(desc(nftCertificates.mintedAt));\n  }\n\n  async updateNftTokenId(transactionHash: string, tokenId: string): Promise<void> {\n    await db\n      .update(nftCertificates)\n      .set({ tokenId })\n      .where(eq(nftCertificates.transactionHash, transactionHash));\n  }\n\n  // Blockchain pools\n  async getBlockchainPools(): Promise<BlockchainPool[]> {\n    return await db\n      .select()\n      .from(blockchainPools)\n      .orderBy(desc(blockchainPools.createdAt));\n  }\n\n  async createBlockchainPool(pool: InsertBlockchainPool): Promise<BlockchainPool> {\n    const [newPool] = await db.insert(blockchainPools).values(pool).returning();\n    return newPool;\n  }\n\n  async updatePoolStats(poolId: number, totalCredits: number, totalUsers: number): Promise<void> {\n    await db\n      .update(blockchainPools)\n      .set({ totalCredits, totalUsers })\n      .where(eq(blockchainPools.id, poolId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13492},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  integer,\n  jsonb,\n  pgEnum,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  boolean,\n  real,\n  serial,\n  uniqueIndex,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  // Gamification fields\n  level: integer(\"level\").default(1),\n  xp: integer(\"xp\").default(0),\n  ecoCredits: integer(\"eco_credits\").default(0),\n  guildId: varchar(\"guild_id\"),\n  // Blockchain fields\n  walletAddress: varchar(\"wallet_address\"),\n  polygonCredits: real(\"polygon_credits\").default(0), // Real EcoCredits on Polygon\n});\n\nexport const trackEnum = pgEnum(\"track_type\", [\"EcoExplorer\", \"ClimateChampion\", \"WasteWarrior\", \"GreenInnovator\"]);\nexport const difficultyEnum = pgEnum(\"difficulty\", [\"beginner\", \"intermediate\", \"advanced\"]);\nexport const missionStatusEnum = pgEnum(\"mission_status\", [\"not_started\", \"in_progress\", \"completed\"]);\nexport const achievementTypeEnum = pgEnum(\"achievement_type\", [\"first_lesson\", \"track_complete\", \"mission_complete\", \"level_up\", \"guild_challenge\", \"eco_action\"]);\nexport const blockchainTransactionStatusEnum = pgEnum(\"transaction_status\", [\"pending\", \"confirmed\", \"failed\"]);\nexport const nftTypeEnum = pgEnum(\"nft_type\", [\"achievement\", \"milestone\", \"special_recognition\"]);\n\nexport const guilds = pgTable(\"guilds\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  memberCount: integer(\"member_count\").default(0),\n  totalXP: integer(\"total_xp\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  currentChallenge: text(\"current_challenge\"),\n  challengeProgress: integer(\"challenge_progress\").default(0),\n  challengeTarget: integer(\"challenge_target\").default(100),\n  challengeDeadline: timestamp(\"challenge_deadline\"),\n});\n\nexport const lessons = pgTable(\"lessons\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  track: trackEnum(\"track\").notNull(),\n  difficulty: difficultyEnum(\"difficulty\").default(\"beginner\"),\n  xpReward: integer(\"xp_reward\").default(100),\n  creditReward: integer(\"credit_reward\").default(25),\n  duration: integer(\"duration\").default(15), // minutes\n  imageUrl: varchar(\"image_url\"),\n  content: jsonb(\"content\"), // lesson content structure\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  lessonId: integer(\"lesson_id\").notNull(),\n  completed: boolean(\"completed\").default(false),\n  completedAt: timestamp(\"completed_at\"),\n  score: integer(\"score\"),\n}, (table) => ({\n  userLessonUnique: uniqueIndex(\"user_lesson_unique\").on(table.userId, table.lessonId),\n}));\n\nexport const achievements = pgTable(\"achievements\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  type: achievementTypeEnum(\"type\").notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  iconClass: varchar(\"icon_class\").default(\"fas fa-trophy\"),\n  xpReward: integer(\"xp_reward\").default(100),\n  creditReward: integer(\"credit_reward\").default(50),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\nexport const missions = pgTable(\"missions\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\").notNull(), // daily, weekly, special\n  track: trackEnum(\"track\"),\n  xpReward: integer(\"xp_reward\").default(250),\n  creditReward: integer(\"credit_reward\").default(50),\n  requirements: jsonb(\"requirements\"), // mission requirements structure\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\"),\n});\n\nexport const userMissions = pgTable(\"user_missions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  missionId: integer(\"mission_id\").notNull(),\n  status: missionStatusEnum(\"status\").default(\"not_started\"),\n  progress: integer(\"progress\").default(0),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const leaderboardEntries = pgTable(\"leaderboard_entries\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  period: varchar(\"period\").notNull(), // weekly, monthly, all_time\n  xp: integer(\"xp\").default(0),\n  rank: integer(\"rank\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const ecoActions = pgTable(\"eco_actions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  type: varchar(\"type\").notNull(), // ar_scan, simulation_action, real_world_action\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\"),\n  verified: boolean(\"verified\").default(false),\n  xpEarned: integer(\"xp_earned\").default(0),\n  creditsEarned: integer(\"credits_earned\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Blockchain-related tables\nexport const blockchainTransactions = pgTable(\"blockchain_transactions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  transactionHash: varchar(\"transaction_hash\").notNull(),\n  blockchainNetwork: varchar(\"blockchain_network\").default(\"polygon\"),\n  transactionType: varchar(\"transaction_type\").notNull(), // mint_credits, burn_credits, mint_nft\n  amount: real(\"amount\").default(0),\n  status: blockchainTransactionStatusEnum(\"status\").default(\"pending\"),\n  gasUsed: varchar(\"gas_used\"),\n  gasPrice: varchar(\"gas_price\"),\n  blockNumber: integer(\"block_number\"),\n  toAddress: varchar(\"to_address\"),\n  fromAddress: varchar(\"from_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  confirmedAt: timestamp(\"confirmed_at\"),\n});\n\nexport const nftCertificates = pgTable(\"nft_certificates\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  tokenId: varchar(\"token_id\").notNull(),\n  contractAddress: varchar(\"contract_address\").notNull(),\n  nftType: nftTypeEnum(\"nft_type\").notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\"), // NFT metadata JSON\n  imageUrl: varchar(\"image_url\"),\n  blockchainNetwork: varchar(\"blockchain_network\").default(\"polygon\"),\n  transactionHash: varchar(\"transaction_hash\"),\n  mintedAt: timestamp(\"minted_at\").defaultNow(),\n  achievementId: integer(\"achievement_id\"), // Link to achievement if applicable\n});\n\nexport const blockchainPools = pgTable(\"blockchain_pools\", {\n  id: serial(\"id\").primaryKey(),\n  poolName: varchar(\"pool_name\").notNull(),\n  contractAddress: varchar(\"contract_address\").notNull(),\n  totalCredits: real(\"total_credits\").default(0),\n  totalUsers: integer(\"total_users\").default(0),\n  rewardRate: real(\"reward_rate\").default(0.1), // Daily reward rate\n  stakingEnabled: boolean(\"staking_enabled\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  guild: one(guilds, {\n    fields: [users.guildId],\n    references: [guilds.id],\n  }),\n  progress: many(userProgress),\n  achievements: many(achievements),\n  missions: many(userMissions),\n  leaderboardEntries: many(leaderboardEntries),\n  ecoActions: many(ecoActions),\n  blockchainTransactions: many(blockchainTransactions),\n  nftCertificates: many(nftCertificates),\n}));\n\nexport const guildsRelations = relations(guilds, ({ many }) => ({\n  members: many(users),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ many }) => ({\n  userProgress: many(userProgress),\n}));\n\nexport const userProgressRelations = relations(userProgress, ({ one }) => ({\n  user: one(users, {\n    fields: [userProgress.userId],\n    references: [users.id],\n  }),\n  lesson: one(lessons, {\n    fields: [userProgress.lessonId],\n    references: [lessons.id],\n  }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ one }) => ({\n  user: one(users, {\n    fields: [achievements.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const missionsRelations = relations(missions, ({ many }) => ({\n  userMissions: many(userMissions),\n}));\n\nexport const userMissionsRelations = relations(userMissions, ({ one }) => ({\n  user: one(users, {\n    fields: [userMissions.userId],\n    references: [users.id],\n  }),\n  mission: one(missions, {\n    fields: [userMissions.missionId],\n    references: [missions.id],\n  }),\n}));\n\nexport const leaderboardEntriesRelations = relations(leaderboardEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [leaderboardEntries.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const ecoActionsRelations = relations(ecoActions, ({ one }) => ({\n  user: one(users, {\n    fields: [ecoActions.userId],\n    references: [users.id],\n  }),\n}));\n\n// Blockchain relations\nexport const blockchainTransactionsRelations = relations(blockchainTransactions, ({ one }) => ({\n  user: one(users, {\n    fields: [blockchainTransactions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const nftCertificatesRelations = relations(nftCertificates, ({ one }) => ({\n  user: one(users, {\n    fields: [nftCertificates.userId],\n    references: [users.id],\n  }),\n  achievement: one(achievements, {\n    fields: [nftCertificates.achievementId],\n    references: [achievements.id],\n  }),\n}));\n\n// Insert schemas\nexport const upsertUserSchema = createInsertSchema(users);\nexport const insertLessonSchema = createInsertSchema(lessons).omit({ id: true, createdAt: true });\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({ id: true, unlockedAt: true });\nexport const insertMissionSchema = createInsertSchema(missions).omit({ id: true, createdAt: true });\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({ id: true });\nexport const insertUserMissionSchema = createInsertSchema(userMissions).omit({ id: true });\nexport const insertEcoActionSchema = createInsertSchema(ecoActions).omit({ id: true, createdAt: true });\nexport const insertGuildSchema = createInsertSchema(guilds).omit({ createdAt: true });\nexport const insertBlockchainTransactionSchema = createInsertSchema(blockchainTransactions).omit({ id: true, createdAt: true });\nexport const insertNftCertificateSchema = createInsertSchema(nftCertificates).omit({ id: true, mintedAt: true });\nexport const insertBlockchainPoolSchema = createInsertSchema(blockchainPools).omit({ id: true, createdAt: true });\n\n// Types\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Guild = typeof guilds.$inferSelect;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type Mission = typeof missions.$inferSelect;\nexport type UserMission = typeof userMissions.$inferSelect;\nexport type LeaderboardEntry = typeof leaderboardEntries.$inferSelect;\nexport type EcoAction = typeof ecoActions.$inferSelect;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type InsertMission = z.infer<typeof insertMissionSchema>;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type InsertUserMission = z.infer<typeof insertUserMissionSchema>;\nexport type InsertEcoAction = z.infer<typeof insertEcoActionSchema>;\nexport type InsertGuild = z.infer<typeof insertGuildSchema>;\nexport type BlockchainTransaction = typeof blockchainTransactions.$inferSelect;\nexport type NftCertificate = typeof nftCertificates.$inferSelect;\nexport type BlockchainPool = typeof blockchainPools.$inferSelect;\nexport type InsertBlockchainTransaction = z.infer<typeof insertBlockchainTransactionSchema>;\nexport type InsertNftCertificate = z.infer<typeof insertNftCertificateSchema>;\nexport type InsertBlockchainPool = z.infer<typeof insertBlockchainPoolSchema>;\n","size_bytes":12820},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"./components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Learning from \"@/pages/Learning\";\nimport Missions from \"@/pages/Missions\";\nimport Guilds from \"@/pages/Guilds\";\nimport Profile from \"@/pages/Profile\";\nimport Simulation from \"@/pages/Simulation\";\nimport { Blockchain } from \"@/pages/Blockchain\";\nimport ARScanner from \"@/pages/ARScanner\";\nimport Layout from \"@/components/Layout\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/learning\" component={Learning} />\n          <Route path=\"/missions\" component={Missions} />\n          <Route path=\"/guilds\" component={Guilds} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/simulation\" component={Simulation} />\n          <Route path=\"/blockchain\" component={Blockchain} />\n          <Route path=\"/ar-scanner\" component={ARScanner} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Layout>\n            <Router />\n          </Layout>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1887},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(60, 9%, 98%);\n  --foreground: hsl(24, 10%, 10%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(24, 10%, 10%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(24, 10%, 10%);\n  --primary: hsl(168, 76%, 36%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(84, 61%, 44%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(60, 5%, 85%);\n  --muted-foreground: hsl(25, 5%, 45%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(24, 10%, 10%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(60, 9%, 90%);\n  --input: hsl(60, 9%, 90%);\n  --ring: hsl(168, 76%, 36%);\n  --chart-1: hsl(168, 76%, 36%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(43, 96%, 56%);\n  --chart-4: hsl(84, 61%, 44%);\n  --chart-5: hsl(341.4894, 75.2%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(24, 10%, 10%);\n  --sidebar-primary: hsl(168, 76%, 36%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(60, 5%, 85%);\n  --sidebar-accent-foreground: hsl(25, 5%, 45%);\n  --sidebar-border: hsl(60, 9%, 90%);\n  --sidebar-ring: hsl(168, 76%, 36%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 1rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 1px 2px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 1px 2px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 2px 4px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 4px 6px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 8px 10px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(20, 14%, 4%);\n  --foreground: hsl(60, 9%, 98%);\n  --card: hsl(20, 13%, 6%);\n  --card-foreground: hsl(60, 9%, 98%);\n  --popover: hsl(20, 13%, 6%);\n  --popover-foreground: hsl(60, 9%, 98%);\n  --primary: hsl(168, 76%, 36%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(84, 61%, 44%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(12, 6%, 15%);\n  --muted-foreground: hsl(24, 5%, 64%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(24, 10%, 10%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(12, 6%, 15%);\n  --input: hsl(12, 6%, 15%);\n  --ring: hsl(168, 76%, 36%);\n  --chart-1: hsl(168, 76%, 36%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(43, 96%, 56%);\n  --chart-4: hsl(84, 61%, 44%);\n  --chart-5: hsl(341.4894, 75.2%, 50.9804%);\n  --sidebar: hsl(20, 13%, 6%);\n  --sidebar-foreground: hsl(60, 9%, 98%);\n  --sidebar-primary: hsl(168, 76%, 36%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(12, 6%, 15%);\n  --sidebar-accent-foreground: hsl(24, 5%, 64%);\n  --sidebar-border: hsl(12, 6%, 15%);\n  --sidebar-ring: hsl(168, 76%, 36%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 1rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 1px 2px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 1px 2px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 2px 4px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 4px 6px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00), 0px 8px 10px -1px hsl(168, 76%, 36%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(168, 76%, 36%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.progress-ring {\n  transform: rotate(-90deg);\n}\n\n.progress-ring-fill {\n  transition: stroke-dashoffset 0.5s ease-in-out;\n}\n\n.floating-animation {\n  animation: float 3s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-10px); \n  }\n}\n\n.eco-gradient {\n  background: linear-gradient(135deg, var(--primary), var(--secondary));\n}\n\n.glass-effect {\n  backdrop-filter: blur(10px);\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n","size_bytes":4889},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ARScanner.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ARScanner() {\n  const [isScanning, setIsScanning] = useState(false);\n  const { toast } = useToast();\n\n  const scanMutation = useMutation({\n    mutationFn: async (scanType: string) => {\n      // Simulate AR scanning process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Create eco action for the scan\n      return apiRequest(\"POST\", \"/api/eco-actions\", {\n        type: \"ar_scan\",\n        description: `AR Scan: ${scanType}`,\n        xpEarned: 25,\n        creditsEarned: 10,\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Great Scan!\",\n        description: `You earned ${(data as any).xpEarned} XP and ${(data as any).creditsEarned} EcoCredits`,\n      });\n      setIsScanning(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Scan Failed\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n      setIsScanning(false);\n    },\n  });\n\n  const handleScan = () => {\n    setIsScanning(true);\n    // Simulate different scan types\n    const scanTypes = [\"Plant Species\", \"Recyclable Material\", \"Air Quality\"];\n    const randomType = scanTypes[Math.floor(Math.random() * scanTypes.length)];\n    scanMutation.mutate(randomType);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Button\n        onClick={handleScan}\n        disabled={isScanning || scanMutation.isPending}\n        className=\"w-full flex items-center justify-between p-3 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors\"\n        data-testid=\"button-ar-scanner\"\n      >\n        <div className=\"flex items-center space-x-3\">\n          <i className=\"fas fa-camera text-white\"></i>\n          <span>{isScanning ? \"Scanning...\" : \"AR Scanner\"}</span>\n        </div>\n        <i className=\"fas fa-chevron-right text-gray-300\"></i>\n      </Button>\n\n      {isScanning && (\n        <div className=\"bg-gradient-to-b from-sky-400 to-green-400 rounded-lg p-8 text-center text-white\">\n          <div className=\"relative\">\n            <div className=\"w-16 h-16 border-4 border-white rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-crosshairs text-2xl animate-spin\"></i>\n            </div>\n            <p className=\"text-sm\">Analyzing environmental data...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2591},"client/src/components/AchievementCard.tsx":{"content":"interface AchievementCardProps {\n  achievement: {\n    id: number;\n    title: string;\n    description: string;\n    iconClass?: string;\n    creditReward: number;\n    unlockedAt: string;\n  };\n}\n\nexport default function AchievementCard({ achievement }: AchievementCardProps) {\n  const iconClass = achievement.iconClass || \"fas fa-trophy\";\n  \n  return (\n    <div className=\"bg-card rounded-lg border border-border p-4 text-center hover:shadow-md transition-shadow\" data-testid={`card-achievement-${achievement.id}`}>\n      <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-3 floating-animation\">\n        <i className={`${iconClass} text-2xl text-accent-foreground`}></i>\n      </div>\n      <h4 className=\"font-semibold\" data-testid={`text-achievement-title-${achievement.id}`}>\n        {achievement.title}\n      </h4>\n      <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`text-achievement-description-${achievement.id}`}>\n        {achievement.description}\n      </p>\n      <div className=\"text-xs text-accent mt-2\" data-testid={`text-achievement-reward-${achievement.id}`}>\n        +{achievement.creditReward} EcoCredits\n      </div>\n    </div>\n  );\n}\n","size_bytes":1206},"client/src/components/GuildCard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\ninterface GuildCardProps {\n  user: {\n    guildId?: string;\n  };\n}\n\nexport default function GuildCard({ user }: GuildCardProps) {\n  const { data: guild, isLoading } = useQuery({\n    queryKey: [\"/api/guild\", user.guildId],\n    enabled: !!user.guildId,\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n          <div className=\"h-20 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user.guildId || !guild) {\n    return (\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-bold\">Join a Guild</h3>\n          <i className=\"fas fa-users text-primary text-xl\"></i>\n        </div>\n        \n        <div className=\"text-center space-y-4\">\n          <div className=\"w-20 h-20 bg-muted/50 rounded-full flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-users text-3xl text-muted-foreground\"></i>\n          </div>\n          <div>\n            <h4 className=\"font-semibold mb-2\">No Guild Yet</h4>\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              Join a guild to collaborate with other eco champions and participate in team challenges.\n            </p>\n          </div>\n          <Link href=\"/guilds\" data-testid=\"link-join-guild\">\n            <Button>\n              <i className=\"fas fa-plus mr-2\"></i>\n              Find Guild\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const challengeProgress = (guild as any)?.challengeProgress || 0;\n  const challengeTarget = (guild as any)?.challengeTarget || 100;\n  const progressPercentage = Math.round((challengeProgress / challengeTarget) * 100);\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-bold\">Your Guild</h3>\n        <i className=\"fas fa-users text-primary text-xl\"></i>\n      </div>\n      \n      <div className=\"text-center mb-6\">\n        <div className=\"w-20 h-20 eco-gradient rounded-full flex items-center justify-center mx-auto mb-3\">\n          <i className=\"fas fa-tree text-3xl text-white\"></i>\n        </div>\n        <h4 className=\"text-lg font-bold\" data-testid=\"text-guild-name\">\n          {(guild as any)?.name}\n        </h4>\n        <p className=\"text-muted-foreground\" data-testid=\"text-guild-members\">\n          {(guild as any)?.memberCount} members\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Guild Progress</span>\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"text-guild-progress\">\n            {progressPercentage}%\n          </span>\n        </div>\n        <div className=\"w-full bg-muted rounded-full h-3\">\n          <div \n            className=\"bg-primary h-3 rounded-full transition-all duration-500\" \n            style={{ width: `${progressPercentage}%` }}\n          ></div>\n        </div>\n        \n        {(guild as any)?.currentChallenge && (\n          <div className=\"bg-muted/50 rounded-lg p-4\">\n            <h5 className=\"font-semibold mb-2\">Current Challenge</h5>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-guild-challenge\">\n              {(guild as any)?.currentChallenge} - {challengeProgress}/{challengeTarget} completed\n            </p>\n            {(guild as any)?.challengeDeadline && (\n              <div className=\"mt-2 flex items-center space-x-2\">\n                <i className=\"fas fa-clock text-accent\"></i>\n                <span className=\"text-sm\">\n                  {new Date((guild as any).challengeDeadline).toLocaleDateString()}\n                </span>\n              </div>\n            )}\n          </div>\n        )}\n        \n        <Link href=\"/guilds\" data-testid=\"link-guild-details\">\n          <Button variant=\"outline\" className=\"w-full\">\n            View Guild Details\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4386},"client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"./ThemeProvider\";\nimport { Link, useLocation } from \"wouter\";\nimport MobileNavigation from \"./MobileNavigation\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const { isAuthenticated, user } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const [location] = useLocation();\n\n  if (!isAuthenticated) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div className=\"bg-background text-foreground font-sans antialiased min-h-screen\">\n      {/* Header Navigation */}\n      <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-leaf text-primary-foreground\"></i>\n                </div>\n                <span className=\"text-xl font-bold\">7even</span>\n              </div>\n            </div>\n\n            <nav className=\"hidden md:flex items-center space-x-6\">\n              <Link href=\"/\" data-testid=\"link-dashboard\">\n                <a className={`${location === \"/\" ? \"text-foreground\" : \"text-muted-foreground\"} hover:text-primary transition-colors`}>\n                  Dashboard\n                </a>\n              </Link>\n              <Link href=\"/learning\" data-testid=\"link-learning\">\n                <a className={`${location === \"/learning\" ? \"text-foreground\" : \"text-muted-foreground\"} hover:text-primary transition-colors`}>\n                  Learning\n                </a>\n              </Link>\n              <Link href=\"/ar-scanner\" data-testid=\"link-ar-scanner\">\n                <a className={`${location === \"/ar-scanner\" ? \"text-foreground\" : \"text-muted-foreground\"} hover:text-primary transition-colors`}>\n                  AR Scanner\n                </a>\n              </Link>\n              <Link href=\"/missions\" data-testid=\"link-missions\">\n                <a className={`${location === \"/missions\" ? \"text-foreground\" : \"text-muted-foreground\"} hover:text-primary transition-colors`}>\n                  Missions\n                </a>\n              </Link>\n              <Link href=\"/guilds\" data-testid=\"link-guilds\">\n                <a className={`${location === \"/guilds\" ? \"text-foreground\" : \"text-muted-foreground\"} hover:text-primary transition-colors`}>\n                  Guilds\n                </a>\n              </Link>\n              <Link href=\"/simulation\" data-testid=\"link-simulation\">\n                <a className={`${location === \"/simulation\" ? \"text-foreground\" : \"text-muted-foreground\"} hover:text-primary transition-colors`}>\n                  Simulation\n                </a>\n              </Link>\n              <Link href=\"/blockchain\" data-testid=\"link-blockchain\">\n                <a className={`${location === \"/blockchain\" ? \"text-foreground\" : \"text-muted-foreground\"} hover:text-primary transition-colors`}>\n                  Blockchain\n                </a>\n              </Link>\n            </nav>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Dark Mode Toggle */}\n              <button \n                onClick={toggleTheme}\n                className=\"p-2 text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"button-theme-toggle\"\n              >\n                <i className={theme === \"dark\" ? \"fas fa-sun\" : \"fas fa-moon\"}></i>\n              </button>\n              \n              {/* EcoCredits Display */}\n              <div className=\"flex items-center space-x-2 bg-accent/10 px-3 py-1 rounded-full\" data-testid=\"display-ecocredits\">\n                <i className=\"fas fa-coins text-accent\"></i>\n                <span className=\"font-semibold\">{(user as any)?.ecoCredits || 0}</span>\n              </div>\n\n              {/* User Profile */}\n              <Link href=\"/profile\" data-testid=\"link-profile\">\n                <a className=\"flex items-center space-x-2\">\n                  <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                    {(user as any)?.profileImageUrl ? (\n                      <img \n                        src={(user as any).profileImageUrl} \n                        alt=\"Profile\" \n                        className=\"w-8 h-8 rounded-full object-cover\"\n                      />\n                    ) : (\n                      <i className=\"fas fa-user text-secondary-foreground\"></i>\n                    )}\n                  </div>\n                  <span className=\"hidden sm:block font-medium\">\n                    {(user as any)?.firstName || \"User\"}\n                  </span>\n                </a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mb-20 md:mb-0\">\n        {children}\n      </main>\n\n      <MobileNavigation />\n    </div>\n  );\n}\n","size_bytes":5292},"client/src/components/LeaderboardCard.tsx":{"content":"interface LeaderboardCardProps {\n  leaderboard: Array<{\n    userId: string;\n    xp: number;\n    rank: number;\n    user?: {\n      firstName?: string;\n      lastName?: string;\n      level: number;\n    };\n  }>;\n  currentUserId: string;\n}\n\nexport default function LeaderboardCard({ leaderboard, currentUserId }: LeaderboardCardProps) {\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-bold\">Leaderboard</h3>\n        <select className=\"bg-muted rounded px-3 py-1 text-sm border border-border\" data-testid=\"select-leaderboard-period\">\n          <option value=\"weekly\">This Week</option>\n          <option value=\"monthly\">This Month</option>\n          <option value=\"all_time\">All Time</option>\n        </select>\n      </div>\n\n      <div className=\"space-y-3\">\n        {leaderboard.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <i className=\"fas fa-chart-line text-4xl mb-4 opacity-50\"></i>\n            <p>No leaderboard data available</p>\n          </div>\n        ) : (\n          leaderboard.slice(0, 4).map((entry, index) => {\n            const isCurrentUser = entry.userId === currentUserId;\n            const rankColor = index === 0 ? \"bg-accent\" : index === 1 ? \"bg-secondary\" : index === 2 ? \"bg-primary/70\" : \"bg-muted\";\n            \n            return (\n              <div \n                key={entry.userId}\n                className={`flex items-center justify-between p-3 rounded-lg ${\n                  isCurrentUser ? \"bg-secondary/10 border border-secondary/20\" : \"bg-muted/30\"\n                }`}\n                data-testid={`leaderboard-entry-${index + 1}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-8 h-8 ${rankColor} rounded-full flex items-center justify-center text-sm font-bold ${\n                    index < 3 ? \"text-white\" : \"text-foreground\"\n                  }`}>\n                    {entry.rank || index + 1}\n                  </div>\n                  <div>\n                    <div className=\"font-medium\" data-testid={`text-leaderboard-name-${index + 1}`}>\n                      {entry.user?.firstName || \"Anonymous\"} {isCurrentUser ? \"(You)\" : \"\"}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Level {entry.user?.level || 1}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-bold\" data-testid={`text-leaderboard-xp-${index + 1}`}>\n                    {entry.xp.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">XP</div>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2946},"client/src/components/LessonCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LessonCardProps {\n  lesson: {\n    id: number;\n    title: string;\n    description: string;\n    track: string;\n    difficulty: string;\n    xpReward: number;\n    creditReward: number;\n    duration: number;\n    imageUrl?: string;\n  };\n  progress?: {\n    completed: boolean;\n    score?: number;\n  };\n}\n\nconst trackColors = {\n  EcoExplorer: \"bg-primary/10 text-primary\",\n  ClimateChampion: \"bg-secondary/10 text-secondary\", \n  WasteWarrior: \"bg-accent/10 text-accent\",\n  GreenInnovator: \"bg-primary/10 text-primary\",\n};\n\nconst difficultyColors = {\n  beginner: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  intermediate: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n  advanced: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n};\n\nexport default function LessonCard({ lesson, progress }: LessonCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const completeLesson = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/progress\", {\n        lessonId: lesson.id,\n        completed: true,\n        score: 85 + Math.floor(Math.random() * 15), // Simulate random score 85-100\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Lesson Completed!\",\n        description: `You earned ${lesson.xpReward} XP and ${lesson.creditReward} EcoCredits`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/progress\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete lesson\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const trackColor = trackColors[lesson.track as keyof typeof trackColors] || \"bg-gray-100 text-gray-800\";\n  const difficultyColor = difficultyColors[lesson.difficulty as keyof typeof difficultyColors] || difficultyColors.beginner;\n  const isCompleted = progress?.completed;\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border overflow-hidden hover:shadow-md transition-shadow\">\n      {lesson.imageUrl && (\n        <img \n          src={lesson.imageUrl} \n          alt={lesson.title}\n          className=\"w-full h-48 object-cover\"\n        />\n      )}\n      \n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <Badge className={trackColor} data-testid={`badge-track-${lesson.id}`}>\n            {lesson.track}\n          </Badge>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant=\"outline\" className={difficultyColor} data-testid={`badge-difficulty-${lesson.id}`}>\n              {lesson.difficulty}\n            </Badge>\n            {isCompleted && (\n              <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\" data-testid={`badge-completed-${lesson.id}`}>\n                <i className=\"fas fa-check mr-1\"></i>\n                Completed\n              </Badge>\n            )}\n          </div>\n        </div>\n        \n        <h4 className=\"text-lg font-semibold mb-2\" data-testid={`text-lesson-title-${lesson.id}`}>\n          {lesson.title}\n        </h4>\n        \n        <p className=\"text-muted-foreground text-sm mb-4\" data-testid={`text-lesson-description-${lesson.id}`}>\n          {lesson.description}\n        </p>\n        \n        {progress?.score && (\n          <div className=\"mb-4\">\n            <div className=\"flex justify-between text-sm mb-1\">\n              <span>Your Score</span>\n              <span className=\"font-semibold\">{progress.score}%</span>\n            </div>\n            <div className=\"w-full bg-muted rounded-full h-2\">\n              <div \n                className=\"bg-primary h-2 rounded-full\" \n                style={{ width: `${progress.score}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n            <span data-testid={`text-lesson-duration-${lesson.id}`}>\n              <i className=\"fas fa-clock mr-1\"></i>{lesson.duration} min\n            </span>\n            <span data-testid={`text-lesson-xp-${lesson.id}`}>\n              <i className=\"fas fa-certificate mr-1\"></i>+{lesson.xpReward} XP\n            </span>\n            <span data-testid={`text-lesson-credits-${lesson.id}`}>\n              <i className=\"fas fa-coins mr-1\"></i>+{lesson.creditReward}\n            </span>\n          </div>\n          \n          <Button\n            onClick={() => completeLesson.mutate()}\n            disabled={isCompleted || completeLesson.isPending}\n            size=\"sm\"\n            data-testid={`button-lesson-action-${lesson.id}`}\n          >\n            {isCompleted ? \"Completed\" : completeLesson.isPending ? \"Starting...\" : \"Start Lesson\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5224},"client/src/components/MissionCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MissionCardProps {\n  mission: {\n    id: number;\n    title: string;\n    description: string;\n    type: string;\n    track?: string;\n    xpReward: number;\n    creditReward: number;\n    status?: string;\n    progress?: number;\n  };\n  isFeatured?: boolean;\n}\n\nexport default function MissionCard({ mission, isFeatured = false }: MissionCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const startMissionMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", `/api/missions/${mission.id}/start`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Mission Started!\",\n        description: `You've started: ${mission.title}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start mission\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const isCompleted = mission.status === \"completed\";\n  const isInProgress = mission.status === \"in_progress\";\n  const canStart = !isCompleted && !isInProgress;\n\n  if (isFeatured) {\n    return (\n      <div className=\"bg-gradient-to-r from-primary to-secondary rounded-lg p-6 text-white\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-xl font-bold\">Today's Mission</h3>\n          <i className=\"fas fa-flag text-2xl\"></i>\n        </div>\n        <h4 className=\"text-lg font-semibold mb-2\" data-testid=\"text-featured-mission-title\">\n          {mission.title}\n        </h4>\n        <p className=\"mb-4 opacity-90\" data-testid=\"text-featured-mission-description\">\n          {mission.description}\n        </p>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"bg-white/20 rounded-full px-3 py-1 text-sm\">\n              <i className=\"fas fa-star mr-1\"></i>\n              +{mission.xpReward} XP\n            </div>\n            <div className=\"bg-white/20 rounded-full px-3 py-1 text-sm\">\n              <i className=\"fas fa-coins mr-1\"></i>\n              +{mission.creditReward} EcoCredits\n            </div>\n          </div>\n          <Button\n            onClick={() => startMissionMutation.mutate()}\n            disabled={!canStart || startMissionMutation.isPending}\n            className=\"bg-white text-primary px-4 py-2 rounded-lg font-semibold hover:bg-white/90 transition-colors\"\n            data-testid=\"button-start-featured-mission\"\n          >\n            {isCompleted ? \"Completed\" : isInProgress ? \"In Progress\" : \"Start Mission\"}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n              mission.type === \"daily\" ? \"bg-primary/10 text-primary\" :\n              mission.type === \"weekly\" ? \"bg-secondary/10 text-secondary\" :\n              \"bg-accent/10 text-accent\"\n            }`}>\n              {mission.type}\n            </span>\n            {mission.track && (\n              <span className=\"px-2 py-1 text-xs font-medium rounded-full bg-muted text-muted-foreground\">\n                {mission.track}\n              </span>\n            )}\n          </div>\n          <h4 className=\"text-lg font-semibold mb-2\" data-testid={`text-mission-title-${mission.id}`}>\n            {mission.title}\n          </h4>\n          <p className=\"text-muted-foreground text-sm mb-4\" data-testid={`text-mission-description-${mission.id}`}>\n            {mission.description}\n          </p>\n        </div>\n      </div>\n\n      {isInProgress && mission.progress !== undefined && (\n        <div className=\"mb-4\">\n          <div className=\"flex justify-between text-sm mb-1\">\n            <span>Progress</span>\n            <span>{mission.progress}%</span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-500\" \n              style={{ width: `${mission.progress}%` }}\n            ></div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n          <span><i className=\"fas fa-star mr-1\"></i>+{mission.xpReward} XP</span>\n          <span><i className=\"fas fa-coins mr-1\"></i>+{mission.creditReward} Credits</span>\n        </div>\n        <Button\n          onClick={() => startMissionMutation.mutate()}\n          disabled={!canStart || startMissionMutation.isPending}\n          size=\"sm\"\n          data-testid={`button-mission-action-${mission.id}`}\n        >\n          {isCompleted ? \"Completed\" : isInProgress ? \"Continue\" : \"Start\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5287},"client/src/components/MobileNavigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\n\nexport default function MobileNavigation() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-background border-t border-border md:hidden z-40\">\n      <div className=\"grid grid-cols-5 py-2\">\n        <Link href=\"/\" data-testid=\"mobile-nav-home\">\n          <a className={`flex flex-col items-center py-2 ${location === \"/\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n            <i className=\"fas fa-home text-lg\"></i>\n            <span className=\"text-xs mt-1\">Home</span>\n          </a>\n        </Link>\n        <Link href=\"/learning\" data-testid=\"mobile-nav-learning\">\n          <a className={`flex flex-col items-center py-2 ${location === \"/learning\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n            <i className=\"fas fa-book text-lg\"></i>\n            <span className=\"text-xs mt-1\">Learn</span>\n          </a>\n        </Link>\n        <Link href=\"/missions\" data-testid=\"mobile-nav-missions\">\n          <a className={`flex flex-col items-center py-2 ${location === \"/missions\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n            <i className=\"fas fa-flag text-lg\"></i>\n            <span className=\"text-xs mt-1\">Missions</span>\n          </a>\n        </Link>\n        <Link href=\"/guilds\" data-testid=\"mobile-nav-guilds\">\n          <a className={`flex flex-col items-center py-2 ${location === \"/guilds\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n            <i className=\"fas fa-users text-lg\"></i>\n            <span className=\"text-xs mt-1\">Guilds</span>\n          </a>\n        </Link>\n        <Link href=\"/profile\" data-testid=\"mobile-nav-profile\">\n          <a className={`flex flex-col items-center py-2 ${location === \"/profile\" ? \"text-primary\" : \"text-muted-foreground\"}`}>\n            <i className=\"fas fa-user text-lg\"></i>\n            <span className=\"text-xs mt-1\">Profile</span>\n          </a>\n        </Link>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1976},"client/src/components/ProgressCard.tsx":{"content":"interface ProgressCardProps {\n  track: string;\n  completed: number;\n  total: number;\n  index: number;\n}\n\nconst trackIcons = {\n  EcoExplorer: \"fas fa-seedling\",\n  ClimateChampion: \"fas fa-cloud\",\n  WasteWarrior: \"fas fa-recycle\",\n  GreenInnovator: \"fas fa-lightbulb\",\n};\n\nconst trackColors = [\n  \"text-primary bg-primary/10\",\n  \"text-secondary bg-secondary/10\", \n  \"text-accent bg-accent/10\",\n  \"text-primary bg-primary/10\",\n];\n\nexport default function ProgressCard({ track, completed, total, index }: ProgressCardProps) {\n  const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;\n  const colorClass = trackColors[index % trackColors.length];\n  const iconClass = trackIcons[track as keyof typeof trackIcons] || \"fas fa-leaf\";\n\n  return (\n    <div className=\"bg-card rounded-lg p-6 border border-border shadow-sm hover:shadow-md transition-shadow\" data-testid={`card-progress-${track}`}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${colorClass}`}>\n          <i className={`${iconClass} text-xl`}></i>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-2xl font-bold text-primary\" data-testid={`text-progress-${track}`}>\n            {percentage}%\n          </div>\n          <div className=\"text-sm text-muted-foreground\">Complete</div>\n        </div>\n      </div>\n      <h3 className=\"font-semibold mb-2\">{track}</h3>\n      <div className=\"w-full bg-muted rounded-full h-2\">\n        <div \n          className=\"bg-primary h-2 rounded-full transition-all duration-500\" \n          style={{ width: `${percentage}%` }}\n        ></div>\n      </div>\n      <p className=\"text-sm text-muted-foreground mt-2\" data-testid={`text-lessons-${track}`}>\n        {completed}/{total} lessons complete\n      </p>\n    </div>\n  );\n}\n","size_bytes":1858},"client/src/components/SimulationInterface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdvancedEcosystemCanvas from \"./AdvancedEcosystemCanvas\";\n\ninterface SimulationInterfaceProps {\n  isRunning: boolean;\n  onComplete: (results: any) => void;\n  onStop: () => void;\n}\n\ninterface SimulationState {\n  co2Levels: number;\n  forestCover: number;\n  temperature: number;\n  renewableEnergy: number;\n  population: number;\n  industryLevel: number;\n}\n\ninterface SimulationMetrics {\n  speciesCount: number;\n  airQuality: string;\n  carbonStorage: number;\n  biodiversityIndex: number;\n  sustainabilityScore: number;\n}\n\nexport default function SimulationInterface({ isRunning, onComplete, onStop }: SimulationInterfaceProps) {\n  const { toast } = useToast();\n  const [simulationState, setSimulationState] = useState<SimulationState>({\n    co2Levels: 410,\n    forestCover: 65,\n    temperature: 1.2,\n    renewableEnergy: 25,\n    population: 50,\n    industryLevel: 60,\n  });\n\n  const [metrics, setMetrics] = useState<SimulationMetrics>({\n    speciesCount: 1247,\n    airQuality: \"Good\",\n    carbonStorage: 2.3,\n    biodiversityIndex: 75,\n    sustainabilityScore: 68,\n  });\n\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  const simulationAction = useMutation({\n    mutationFn: async (actionData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/eco-actions\", {\n        type: \"simulation_action\",\n        description: `${actionData.actionType}: Applied ${actionData.impact} unit impact in ecosystem simulation`,\n        xpEarned: Math.max(25, actionData.impact * 5),\n        creditsEarned: Math.max(5, actionData.impact * 2),\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Action Recorded!\",\n        description: `You earned ${(data as any).xpEarned} XP and ${(data as any).creditsEarned} EcoCredits`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record simulation action\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate metrics based on simulation state\n  useEffect(() => {\n    const calculateMetrics = () => {\n      const { co2Levels, forestCover, temperature, renewableEnergy, population, industryLevel } = simulationState;\n      \n      // Species count decreases with higher CO2, temperature, and industry; increases with forest cover\n      const speciesCountBase = 1500;\n      const co2Impact = (co2Levels - 350) * -2;\n      const forestImpact = (forestCover - 50) * 4;\n      const tempImpact = temperature * -100;\n      const speciesCount = Math.max(100, Math.round(speciesCountBase + co2Impact + forestImpact + tempImpact));\n\n      // Air quality based on CO2 levels and renewable energy\n      let airQuality = \"Excellent\";\n      const adjustedCo2 = co2Levels - (renewableEnergy * 2);\n      if (adjustedCo2 > 450) airQuality = \"Poor\";\n      else if (adjustedCo2 > 420) airQuality = \"Moderate\";\n      else if (adjustedCo2 > 380) airQuality = \"Good\";\n\n      // Carbon storage increases with forest cover, decreases with industry\n      const carbonStorage = Math.max(0, ((forestCover / 100) * 3.5) - ((industryLevel / 100) * 1.2));\n\n      // Biodiversity index\n      const biodiversityIndex = Math.max(0, Math.min(100, \n        (forestCover * 0.6) + \n        ((100 - co2Levels + 300) / 10) + \n        (renewableEnergy * 0.3) - \n        (temperature * 5) - \n        (industryLevel * 0.2)\n      ));\n\n      // Sustainability score\n      const sustainabilityScore = Math.max(0, Math.min(100,\n        (renewableEnergy * 0.4) + \n        (forestCover * 0.3) + \n        ((100 - industryLevel + 50) * 0.2) + \n        ((450 - co2Levels) / 10) - \n        (temperature * 3)\n      ));\n\n      setMetrics({\n        speciesCount: Math.round(speciesCount),\n        airQuality,\n        carbonStorage: Math.round(carbonStorage * 10) / 10,\n        biodiversityIndex: Math.round(biodiversityIndex),\n        sustainabilityScore: Math.round(sustainabilityScore),\n      });\n    };\n\n    calculateMetrics();\n  }, [simulationState]);\n\n  // Simulation timer\n  useEffect(() => {\n    if (isRunning) {\n      intervalRef.current = setInterval(() => {\n        setTimeElapsed(prev => prev + 1);\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning]);\n\n  const handleParameterChange = (parameter: keyof SimulationState, value: number[]) => {\n    setSimulationState(prev => ({\n      ...prev,\n      [parameter]: value[0]\n    }));\n  };\n\n  const handleActionClick = async (actionType: string, impact: number) => {\n    // Record the action\n    await simulationAction.mutateAsync({\n      actionType,\n      impact,\n    });\n\n    // Apply the action to simulation state\n    switch (actionType) {\n      case \"Plant Trees\":\n        setSimulationState(prev => ({\n          ...prev,\n          forestCover: Math.min(100, prev.forestCover + impact)\n        }));\n        break;\n      case \"Add Solar\":\n        setSimulationState(prev => ({\n          ...prev,\n          renewableEnergy: Math.min(100, prev.renewableEnergy + impact)\n        }));\n        break;\n      case \"Wind Power\":\n        setSimulationState(prev => ({\n          ...prev,\n          renewableEnergy: Math.min(100, prev.renewableEnergy + impact),\n          co2Levels: Math.max(350, prev.co2Levels - impact * 2)\n        }));\n        break;\n    }\n  };\n\n  const handleStopSimulation = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    \n    const results = {\n      timeElapsed,\n      finalMetrics: metrics,\n      biodiversityChange: metrics.biodiversityIndex - 75, // Assuming 75 was baseline\n      carbonChange: (simulationState.co2Levels - 410) / 4.1, // Percentage change from baseline\n      temperatureChange: simulationState.temperature - 1.2, // Change from baseline\n      sustainabilityIndex: metrics.sustainabilityScore,\n      economicValue: metrics.sustainabilityScore * 1000,\n      xpEarned: Math.max(50, Math.round(metrics.sustainabilityScore * 2)),\n      creditsEarned: Math.max(10, Math.round(metrics.biodiversityIndex / 2)),\n    };\n\n    onComplete(results);\n    onStop();\n    setTimeElapsed(0);\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-globe-americas text-primary\"></i>\n            <span>Ecosystem Simulation</span>\n          </CardTitle>\n          {isRunning && (\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-simulation-time\">\n                Time: {Math.floor(timeElapsed / 60)}:{(timeElapsed % 60).toString().padStart(2, '0')}\n              </span>\n              <Button variant=\"destructive\" size=\"sm\" onClick={handleStopSimulation} data-testid=\"button-stop-simulation\">\n                <i className=\"fas fa-stop mr-2\"></i>\n                Stop\n              </Button>\n            </div>\n          )}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Advanced Canvas Simulation Visualization */}\n        <div className=\"min-h-96\">\n          <AdvancedEcosystemCanvas\n            simulationState={simulationState}\n            metrics={metrics}\n            isRunning={isRunning}\n          />\n        </div>\n\n        {/* Control Panel */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {/* Environmental Controls */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">Environmental Factors</h4>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm\">CO₂ Levels (ppm)</label>\n                <span className=\"text-sm font-medium\" data-testid=\"text-co2-value\">{simulationState.co2Levels}</span>\n              </div>\n              <Slider\n                value={[simulationState.co2Levels]}\n                onValueChange={(value) => handleParameterChange('co2Levels', value)}\n                min={350}\n                max={500}\n                step={5}\n                disabled={isRunning}\n                data-testid=\"slider-co2\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm\">Forest Cover (%)</label>\n                <span className=\"text-sm font-medium\" data-testid=\"text-forest-value\">{simulationState.forestCover}</span>\n              </div>\n              <Slider\n                value={[simulationState.forestCover]}\n                onValueChange={(value) => handleParameterChange('forestCover', value)}\n                min={0}\n                max={100}\n                step={1}\n                disabled={isRunning}\n                data-testid=\"slider-forest\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm\">Temperature (+°C)</label>\n                <span className=\"text-sm font-medium\" data-testid=\"text-temperature-value\">{simulationState.temperature}</span>\n              </div>\n              <Slider\n                value={[simulationState.temperature]}\n                onValueChange={(value) => handleParameterChange('temperature', value)}\n                min={-2}\n                max={5}\n                step={0.1}\n                disabled={isRunning}\n                data-testid=\"slider-temperature\"\n              />\n            </div>\n          </div>\n\n          {/* Human Impact Controls */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">Human Activities</h4>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm\">Renewable Energy (%)</label>\n                <span className=\"text-sm font-medium\" data-testid=\"text-renewable-value\">{simulationState.renewableEnergy}</span>\n              </div>\n              <Slider\n                value={[simulationState.renewableEnergy]}\n                onValueChange={(value) => handleParameterChange('renewableEnergy', value)}\n                min={0}\n                max={100}\n                step={1}\n                disabled={isRunning}\n                data-testid=\"slider-renewable\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm\">Industry Level (%)</label>\n                <span className=\"text-sm font-medium\" data-testid=\"text-industry-value\">{simulationState.industryLevel}</span>\n              </div>\n              <Slider\n                value={[simulationState.industryLevel]}\n                onValueChange={(value) => handleParameterChange('industryLevel', value)}\n                min={0}\n                max={100}\n                step={1}\n                disabled={isRunning}\n                data-testid=\"slider-industry\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm\">Population Density (%)</label>\n                <span className=\"text-sm font-medium\" data-testid=\"text-population-value\">{simulationState.population}</span>\n              </div>\n              <Slider\n                value={[simulationState.population]}\n                onValueChange={(value) => handleParameterChange('population', value)}\n                min={0}\n                max={100}\n                step={1}\n                disabled={isRunning}\n                data-testid=\"slider-population\"\n              />\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">Conservation Actions</h4>\n            \n            <Button\n              onClick={() => handleActionClick(\"Plant Trees\", 5)}\n              disabled={!isRunning || simulationAction.isPending}\n              className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-plant-trees\"\n            >\n              <i className=\"fas fa-seedling mr-2\"></i>\n              Plant Trees (+5% Forest)\n            </Button>\n\n            <Button\n              onClick={() => handleActionClick(\"Add Solar\", 10)}\n              disabled={!isRunning || simulationAction.isPending}\n              className=\"w-full bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n              data-testid=\"button-add-solar\"\n            >\n              <i className=\"fas fa-solar-panel mr-2\"></i>\n              Add Solar (+10% Renewable)\n            </Button>\n\n            <Button\n              onClick={() => handleActionClick(\"Wind Power\", 8)}\n              disabled={!isRunning || simulationAction.isPending}\n              className=\"w-full bg-accent text-accent-foreground hover:bg-accent/90\"\n              data-testid=\"button-wind-power\"\n            >\n              <i className=\"fas fa-wind mr-2\"></i>\n              Wind Power (+8% Renewable)\n            </Button>\n\n            {/* Impact Summary */}\n            <div className=\"mt-4 p-3 bg-muted/50 rounded-lg\">\n              <h5 className=\"font-medium text-sm mb-2\">Current Impact</h5>\n              <div className=\"space-y-1 text-xs\">\n                <div className=\"flex justify-between\">\n                  <span>Carbon Storage:</span>\n                  <span className=\"font-medium\" data-testid=\"text-carbon-storage\">{metrics.carbonStorage} GT</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Biodiversity:</span>\n                  <span className=\"font-medium\" data-testid=\"text-biodiversity-summary\">{metrics.biodiversityIndex}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Sustainability:</span>\n                  <span className=\"font-medium\" data-testid=\"text-sustainability-summary\">{metrics.sustainabilityScore}%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":14916},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || \"light\";\n    }\n    return \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1167},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport ProgressCard from \"@/components/ProgressCard\";\nimport AchievementCard from \"@/components/AchievementCard\";\nimport LeaderboardCard from \"@/components/LeaderboardCard\";\nimport GuildCard from \"@/components/GuildCard\";\nimport MissionCard from \"@/components/MissionCard\";\nimport TensorflowARScanner from \"@/components/TensorflowARScanner\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: dashboardData, isLoading: isDashboardLoading } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n    enabled: isAuthenticated && !isLoading,\n    retry: false,\n  });\n\n  const { data: leaderboard } = useQuery({\n    queryKey: [\"/api/leaderboard\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/leaderboard?period=weekly\");\n      if (!response.ok) throw new Error(\"Failed to fetch leaderboard\");\n      return response.json();\n    },\n    enabled: isAuthenticated && !isLoading,\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || isDashboardLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user || !dashboardData) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-muted-foreground\">Failed to load dashboard data</p>\n      </div>\n    );\n  }\n\n  const { trackProgress = [], achievements = [], missions = [] } = (dashboardData as any) || {};\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Welcome Section */}\n      <section className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-welcome\">\n              Welcome back, {(user as any)?.firstName || \"Explorer\"}! 🌱\n            </h1>\n            <p className=\"text-muted-foreground\">Ready to make an impact today?</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-user-level\">\n                Level {(user as any)?.level || 1}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">EcoChampion</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Progress Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {trackProgress.map((track: any, index: number) => (\n            <ProgressCard\n              key={track.track}\n              track={track.track}\n              completed={track.completed}\n              total={track.total}\n              index={index}\n            />\n          ))}\n        </div>\n\n        {/* Quick Actions & Today's Mission */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Today's Mission */}\n          {missions.length > 0 && (\n            <div className=\"lg:col-span-2\">\n              <MissionCard mission={missions[0]} isFeatured />\n            </div>\n          )}\n\n          {/* Quick Actions */}\n          <div className=\"bg-card rounded-lg border border-border p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n            <div className=\"space-y-3\">\n              <Link href=\"/ar-scanner\" data-testid=\"link-ar-scanner-quick\">\n                <a className=\"w-full flex items-center justify-between p-3 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-camera text-white\"></i>\n                    <span>TensorFlow AR Scanner</span>\n                  </div>\n                  <i className=\"fas fa-chevron-right text-gray-300\"></i>\n                </a>\n              </Link>\n              \n              <Link href=\"/simulation\" data-testid=\"link-simulation-quick\">\n                <a className=\"w-full flex items-center justify-between p-3 bg-secondary/5 rounded-lg hover:bg-secondary/10 transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-play text-secondary\"></i>\n                    <span>Eco Simulation</span>\n                  </div>\n                  <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n                </a>\n              </Link>\n              \n              <Link href=\"/guilds\" data-testid=\"link-guilds-quick\">\n                <a className=\"w-full flex items-center justify-between p-3 bg-accent/5 rounded-lg hover:bg-accent/10 transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <i className=\"fas fa-users text-accent\"></i>\n                    <span>Join Guild</span>\n                  </div>\n                  <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n                </a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Achievements & Progress */}\n      <section className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold\">Recent Achievements</h2>\n          <Link href=\"/profile#achievements\" data-testid=\"link-view-all-achievements\">\n            <a className=\"text-primary hover:text-primary/80 font-medium\">View All</a>\n          </Link>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {achievements.slice(0, 4).map((achievement: any) => (\n            <AchievementCard key={achievement.id} achievement={achievement} />\n          ))}\n          \n          {achievements.length === 0 && (\n            <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n              <i className=\"fas fa-trophy text-4xl mb-4 opacity-50\"></i>\n              <p>Complete lessons and missions to unlock achievements!</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Guild & Leaderboard */}\n      <section className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <GuildCard user={user} />\n        <LeaderboardCard leaderboard={leaderboard || []} currentUserId={(user as any)?.id || ''} />\n      </section>\n    </div>\n  );\n}\n","size_bytes":7070},"client/src/pages/Guilds.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Guilds() {\n  const { user } = useAuth();\n\n  const { data: userGuild, isLoading: isGuildLoading } = useQuery({\n    queryKey: [\"/api/guild\", (user as any)?.guildId],\n    enabled: !!(user as any)?.guildId,\n  });\n\n  // Fetch available guilds from API\n  const { data: availableGuilds = [], isLoading: isGuildsLoading } = useQuery({\n    queryKey: [\"/api/guilds\"],\n    enabled: !(user as any)?.guildId, // Only fetch if user doesn't have a guild\n  });\n\n  const { toast } = useToast();\n\n  const joinGuildMutation = useMutation({\n    mutationFn: async (guildId: string) => {\n      const response = await apiRequest(\"POST\", `/api/guild/${guildId}/join`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Guild Joined!\",\n        description: \"Welcome to your new guild! Start collaborating on environmental challenges.\",\n      });\n      // Invalidate relevant queries to refresh UI\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/guild\"] });\n    },\n    onError: (error) => {\n      console.error(\"Failed to join guild:\", error);\n      toast({\n        title: \"Failed to Join Guild\",\n        description: \"There was an error joining the guild. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isGuildLoading || isGuildsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold\">Environmental Guilds</h1>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n          Join a community of like-minded environmental champions. Collaborate on missions, \n          share knowledge, and make a greater impact together.\n        </p>\n      </div>\n\n      {/* Current Guild Section */}\n      {(user as any)?.guildId && userGuild ? (\n        <section className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold\">Your Guild</h2>\n          <Card className=\"overflow-hidden\">\n            <div className=\"bg-gradient-to-r from-primary to-secondary p-6 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-xl font-bold mb-2\" data-testid=\"text-current-guild-name\">\n                    {(userGuild as any)?.name}\n                  </h3>\n                  <p className=\"opacity-90\">{(userGuild as any)?.description}</p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-current-guild-members\">\n                    {(userGuild as any)?.memberCount}\n                  </div>\n                  <div className=\"text-sm opacity-90\">Members</div>\n                </div>\n              </div>\n            </div>\n            <CardContent className=\"p-6\">\n              {(userGuild as any)?.currentChallenge && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Current Guild Challenge</h4>\n                  <p className=\"text-muted-foreground\" data-testid=\"text-current-guild-challenge\">\n                    {(userGuild as any)?.currentChallenge}\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Progress</span>\n                      <span data-testid=\"text-current-guild-progress\">\n                        {(userGuild as any)?.challengeProgress}/{(userGuild as any)?.challengeTarget}\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-3\">\n                      <div \n                        className=\"bg-primary h-3 rounded-full transition-all duration-500\" \n                        style={{ \n                          width: `${Math.round(((userGuild as any)?.challengeProgress / (userGuild as any)?.challengeTarget) * 100)}%` \n                        }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </section>\n      ) : (\n        /* Available Guilds Section */\n        <section className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold\">Available Guilds</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {availableGuilds.map((guild) => (\n              <Card key={guild.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-guild-${guild.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\" data-testid={`text-guild-name-${guild.id}`}>\n                      {guild.name}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-users text-muted-foreground\"></i>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`text-guild-members-${guild.id}`}>\n                        {guild.memberCount}\n                      </span>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-muted-foreground text-sm\" data-testid={`text-guild-description-${guild.id}`}>\n                    {guild.description}\n                  </p>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">Guild XP</span>\n                      <span data-testid={`text-guild-xp-${guild.id}`}>\n                        {guild.totalXP.toLocaleString()}\n                      </span>\n                    </div>\n                  </div>\n\n                  {guild.currentChallenge && (\n                    <div className=\"space-y-2\">\n                      <h5 className=\"font-medium text-sm\">Current Challenge</h5>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-guild-challenge-${guild.id}`}>\n                        {guild.currentChallenge}\n                      </p>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div \n                          className=\"bg-primary h-2 rounded-full\" \n                          style={{ \n                            width: `${Math.round((guild.challengeProgress / guild.challengeTarget) * 100)}%` \n                          }}\n                        ></div>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {guild.challengeProgress}/{guild.challengeTarget} completed\n                      </div>\n                    </div>\n                  )}\n\n                  <Button \n                    className=\"w-full\" \n                    data-testid={`button-join-guild-${guild.id}`}\n                    onClick={() => joinGuildMutation.mutate(guild.id)}\n                    disabled={joinGuildMutation.isPending}\n                  >\n                    {joinGuildMutation.isPending ? \"Joining...\" : \"Join Guild\"}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n      )}\n\n      {/* Guild Benefits */}\n      <section className=\"bg-muted/50 rounded-lg p-6\">\n        <h3 className=\"text-xl font-bold mb-4\">Guild Benefits</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <i className=\"fas fa-users text-primary text-xl\"></i>\n            </div>\n            <h4 className=\"font-semibold mb-2\">Collaborative Learning</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Work together on environmental challenges and share knowledge with fellow members.\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <i className=\"fas fa-trophy text-secondary text-xl\"></i>\n            </div>\n            <h4 className=\"font-semibold mb-2\">Exclusive Challenges</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Access guild-only missions and competitions with greater rewards and impact.\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <i className=\"fas fa-chart-line text-accent text-xl\"></i>\n            </div>\n            <h4 className=\"font-semibold mb-2\">Amplified Impact</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Multiply your environmental impact through coordinated guild activities and projects.\n            </p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":9772},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10 flex items-center justify-center\">\n      <div className=\"max-w-4xl mx-auto text-center px-4\">\n        <div className=\"mb-8\">\n          <div className=\"w-24 h-24 bg-primary rounded-full flex items-center justify-center mx-auto mb-6 floating-animation\">\n            <i className=\"fas fa-leaf text-4xl text-primary-foreground\"></i>\n          </div>\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">\n            Welcome to <span className=\"text-primary\">7even</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Gamified environmental education platform where you learn, act, and get rewarded for making a positive impact on our planet.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n          <div className=\"bg-card rounded-lg p-6 border border-border\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-seedling text-primary text-xl\"></i>\n            </div>\n            <h3 className=\"font-semibold mb-2\">Learn & Explore</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Master environmental topics through interactive lessons and real-world challenges.\n            </p>\n          </div>\n\n          <div className=\"bg-card rounded-lg p-6 border border-border\">\n            <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-users text-secondary text-xl\"></i>\n            </div>\n            <h3 className=\"font-semibold mb-2\">Join Guilds</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Collaborate with like-minded individuals on environmental missions and challenges.\n            </p>\n          </div>\n\n          <div className=\"bg-card rounded-lg p-6 border border-border\">\n            <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-coins text-accent text-xl\"></i>\n            </div>\n            <h3 className=\"font-semibold mb-2\">Earn EcoCredits</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Get rewarded with EcoCredits for completing lessons and taking real-world eco actions.\n            </p>\n          </div>\n\n          <div className=\"bg-card rounded-lg p-6 border border-border\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-globe text-primary text-xl\"></i>\n            </div>\n            <h3 className=\"font-semibold mb-2\">Make Impact</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Use AR scanning and simulations to understand environmental impact in real-time.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <Button \n            onClick={handleLogin}\n            size=\"lg\"\n            className=\"px-8 py-4 text-lg\"\n            data-testid=\"button-login\"\n          >\n            <i className=\"fas fa-sign-in-alt mr-2\"></i>\n            Start Your Eco Journey\n          </Button>\n          <p className=\"text-sm text-muted-foreground\">\n            Join thousands of environmental champions making a difference every day.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3727},"client/src/pages/Learning.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport LessonCard from \"@/components/LessonCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nconst tracks = [\n  {\n    name: \"EcoExplorer\",\n    description: \"Discover biodiversity and ecosystem fundamentals\",\n    icon: \"fas fa-seedling\",\n    color: \"text-primary bg-primary/10\",\n  },\n  {\n    name: \"ClimateChampion\", \n    description: \"Master climate science and solutions\",\n    icon: \"fas fa-cloud\",\n    color: \"text-secondary bg-secondary/10\",\n  },\n  {\n    name: \"WasteWarrior\",\n    description: \"Learn waste management and circular economy\",\n    icon: \"fas fa-recycle\", \n    color: \"text-accent bg-accent/10\",\n  },\n  {\n    name: \"GreenInnovator\",\n    description: \"Explore sustainable technology and innovation\",\n    icon: \"fas fa-lightbulb\",\n    color: \"text-primary bg-primary/10\",\n  },\n];\n\nexport default function Learning() {\n  const [selectedTrack, setSelectedTrack] = useState(\"all\");\n\n  const { data: lessons, isLoading } = useQuery({\n    queryKey: [\"/api/lessons\", selectedTrack === \"all\" ? undefined : selectedTrack],\n    queryFn: async ({ queryKey }) => {\n      const track = queryKey[1];\n      const url = track ? `/api/lessons?track=${track}` : \"/api/lessons\";\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(\"Failed to fetch lessons\");\n      return response.json();\n    },\n  });\n\n  const { data: progress } = useQuery({\n    queryKey: [\"/api/progress\"],\n  });\n\n  const progressMap = new Map((progress as any[])?.map((p: any) => [p.lessonId, p]) || []);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold\">Environmental Learning Tracks</h1>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n          Choose your path to environmental mastery. Each track offers comprehensive lessons \n          designed to build your knowledge and earn valuable EcoCredits.\n        </p>\n      </div>\n\n      {/* Track Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {tracks.map((track) => (\n          <div \n            key={track.name}\n            className=\"bg-card rounded-lg border border-border p-6 text-center hover:shadow-md transition-shadow cursor-pointer\"\n            onClick={() => setSelectedTrack(track.name)}\n            data-testid={`card-track-${track.name}`}\n          >\n            <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${track.color}`}>\n              <i className={`${track.icon} text-2xl`}></i>\n            </div>\n            <h3 className=\"font-semibold mb-2\">{track.name}</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">{track.description}</p>\n            <Button \n              variant={selectedTrack === track.name ? \"default\" : \"outline\"} \n              size=\"sm\"\n              data-testid={`button-select-track-${track.name}`}\n            >\n              {selectedTrack === track.name ? \"Selected\" : \"Explore\"}\n            </Button>\n          </div>\n        ))}\n      </div>\n\n      {/* Lesson Filter Tabs */}\n      <Tabs value={selectedTrack} onValueChange={setSelectedTrack} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\" data-testid=\"tabs-lesson-filter\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-lessons\">All Lessons</TabsTrigger>\n          <TabsTrigger value=\"EcoExplorer\" data-testid=\"tab-ecoexplorer\">EcoExplorer</TabsTrigger>\n          <TabsTrigger value=\"ClimateChampion\" data-testid=\"tab-climatechampion\">ClimateChampion</TabsTrigger>\n          <TabsTrigger value=\"WasteWarrior\" data-testid=\"tab-wastewarrior\">WasteWarrior</TabsTrigger>\n          <TabsTrigger value=\"GreenInnovator\" data-testid=\"tab-greeninnovator\">GreenInnovator</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={selectedTrack} className=\"mt-8\">\n          {lessons && lessons.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {lessons.map((lesson: any) => (\n                <LessonCard \n                  key={lesson.id} \n                  lesson={lesson} \n                  progress={progressMap.get(lesson.id)}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <i className=\"fas fa-book-open text-4xl text-muted-foreground mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">No Lessons Available</h3>\n              <p className=\"text-muted-foreground\">\n                {selectedTrack === \"all\" \n                  ? \"No lessons have been created yet.\" \n                  : `No lessons available for ${selectedTrack} track.`\n                }\n              </p>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":5218},"client/src/pages/Missions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport MissionCard from \"@/components/MissionCard\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Missions() {\n  const { data: missions, isLoading } = useQuery({\n    queryKey: [\"/api/missions\"],\n  });\n\n  const { data: userMissions } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n    select: (data) => (data as any)?.missions || [],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Create mission map with user progress\n  const userMissionMap = new Map((userMissions as any[])?.map((um: any) => [um.missionId, um]) || []);\n  const enhancedMissions = (missions as any[])?.map((mission: any) => ({\n    ...mission,\n    ...userMissionMap.get(mission.id),\n  })) || [];\n\n  const dailyMissions = enhancedMissions.filter((m: any) => m.type === \"daily\");\n  const weeklyMissions = enhancedMissions.filter((m: any) => m.type === \"weekly\");\n  const specialMissions = enhancedMissions.filter((m: any) => m.type === \"special\");\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold\">Environmental Missions</h1>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n          Take on challenges that make a real difference. Complete missions to earn XP, \n          EcoCredits, and contribute to environmental conservation efforts.\n        </p>\n      </div>\n\n      {/* Mission Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-primary/5 rounded-lg p-6 text-center border border-primary/10\">\n          <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center mx-auto mb-3\">\n            <i className=\"fas fa-calendar-day text-primary-foreground\"></i>\n          </div>\n          <h3 className=\"font-semibold mb-1\">Daily Missions</h3>\n          <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-daily-missions-count\">\n            {dailyMissions.length}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">Active today</p>\n        </div>\n\n        <div className=\"bg-secondary/5 rounded-lg p-6 text-center border border-secondary/10\">\n          <div className=\"w-12 h-12 bg-secondary rounded-full flex items-center justify-center mx-auto mb-3\">\n            <i className=\"fas fa-calendar-week text-secondary-foreground\"></i>\n          </div>\n          <h3 className=\"font-semibold mb-1\">Weekly Challenges</h3>\n          <p className=\"text-2xl font-bold text-secondary\" data-testid=\"text-weekly-missions-count\">\n            {weeklyMissions.length}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">This week</p>\n        </div>\n\n        <div className=\"bg-accent/5 rounded-lg p-6 text-center border border-accent/10\">\n          <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center mx-auto mb-3\">\n            <i className=\"fas fa-star text-accent-foreground\"></i>\n          </div>\n          <h3 className=\"font-semibold mb-1\">Special Events</h3>\n          <p className=\"text-2xl font-bold text-accent\" data-testid=\"text-special-missions-count\">\n            {specialMissions.length}\n          </p>\n          <p className=\"text-sm text-muted-foreground\">Limited time</p>\n        </div>\n      </div>\n\n      {/* Mission Tabs */}\n      <Tabs defaultValue=\"all\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"tabs-mission-filter\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-missions\">All Missions</TabsTrigger>\n          <TabsTrigger value=\"daily\" data-testid=\"tab-daily-missions\">Daily</TabsTrigger>\n          <TabsTrigger value=\"weekly\" data-testid=\"tab-weekly-missions\">Weekly</TabsTrigger>\n          <TabsTrigger value=\"special\" data-testid=\"tab-special-missions\">Special</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"mt-8\">\n          <div className=\"space-y-6\">\n            {enhancedMissions.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {enhancedMissions.map((mission: any) => (\n                  <MissionCard key={mission.id} mission={mission} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-flag text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-semibold mb-2\">No Missions Available</h3>\n                <p className=\"text-muted-foreground\">Check back later for new environmental challenges!</p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"daily\" className=\"mt-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {dailyMissions.length > 0 ? (\n              dailyMissions.map((mission: any) => (\n                <MissionCard key={mission.id} mission={mission} />\n              ))\n            ) : (\n              <div className=\"col-span-2 text-center py-12\">\n                <i className=\"fas fa-calendar-day text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-semibold mb-2\">No Daily Missions</h3>\n                <p className=\"text-muted-foreground\">New daily missions are added regularly!</p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"weekly\" className=\"mt-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {weeklyMissions.length > 0 ? (\n              weeklyMissions.map((mission: any) => (\n                <MissionCard key={mission.id} mission={mission} />\n              ))\n            ) : (\n              <div className=\"col-span-2 text-center py-12\">\n                <i className=\"fas fa-calendar-week text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-semibold mb-2\">No Weekly Challenges</h3>\n                <p className=\"text-muted-foreground\">Weekly challenges refresh every Monday!</p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"special\" className=\"mt-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {specialMissions.length > 0 ? (\n              specialMissions.map((mission: any) => (\n                <MissionCard key={mission.id} mission={mission} />\n              ))\n            ) : (\n              <div className=\"col-span-2 text-center py-12\">\n                <i className=\"fas fa-star text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-semibold mb-2\">No Special Events</h3>\n                <p className=\"text-muted-foreground\">Keep an eye out for limited-time special missions!</p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":7102},"client/src/pages/Profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport AchievementCard from \"@/components/AchievementCard\";\n\nexport default function Profile() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: achievements, isLoading: achievementsLoading } = useQuery({\n    queryKey: [\"/api/achievements\"],\n    enabled: isAuthenticated && !isLoading,\n    retry: false,\n  });\n\n  const { data: progress } = useQuery({\n    queryKey: [\"/api/progress\"],\n    enabled: isAuthenticated && !isLoading,\n    retry: false,\n  });\n\n  const { data: ecoActions } = useQuery({\n    queryKey: [\"/api/eco-actions\"],\n    enabled: isAuthenticated && !isLoading,\n    retry: false,\n  });\n\n  const { data: userGuild } = useQuery({\n    queryKey: [\"/api/guild\", (user as any)?.guildId],\n    enabled: isAuthenticated && !isLoading && !!(user as any)?.guildId,\n    retry: false,\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || achievementsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-muted-foreground\">Failed to load profile data</p>\n      </div>\n    );\n  }\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const completedLessons = (progress as any[])?.filter((p: any) => p.completed).length || 0;\n  const totalActions = (ecoActions as any[])?.length || 0;\n  const totalAchievements = (achievements as any[])?.length || 0;\n\n  // Calculate level progress (1000 XP per level)\n  const currentLevelXP = ((user as any)?.xp || 0) % 1000;\n  const levelProgress = (currentLevelXP / 1000) * 100;\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Profile Header */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"flex flex-col md:flex-row items-center md:items-start gap-6\">\n            {/* Avatar */}\n            <div className=\"relative\">\n              <div className=\"w-24 h-24 bg-primary rounded-full flex items-center justify-center\">\n                {(user as any)?.profileImageUrl ? (\n                  <img \n                    src={(user as any).profileImageUrl} \n                    alt=\"Profile\" \n                    className=\"w-24 h-24 rounded-full object-cover\"\n                    data-testid=\"img-profile-avatar\"\n                  />\n                ) : (\n                  <i className=\"fas fa-user text-4xl text-primary-foreground\"></i>\n                )}\n              </div>\n              <div className=\"absolute -bottom-2 -right-2 w-8 h-8 bg-accent rounded-full flex items-center justify-center border-2 border-background\">\n                <span className=\"text-sm font-bold text-accent-foreground\" data-testid=\"text-user-level-badge\">\n                  {(user as any)?.level || 1}\n                </span>\n              </div>\n            </div>\n\n            {/* User Info */}\n            <div className=\"flex-1 text-center md:text-left\">\n              <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-user-name\">\n                {(user as any)?.firstName} {(user as any)?.lastName}\n              </h1>\n              {(user as any)?.email && (\n                <p className=\"text-muted-foreground mb-4\" data-testid=\"text-user-email\">\n                  {(user as any)?.email}\n                </p>\n              )}\n              \n              {/* Level Progress */}\n              <div className=\"mb-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium\">Level {(user as any)?.level || 1} Progress</span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {currentLevelXP}/1000 XP\n                  </span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div \n                    className=\"bg-primary h-2 rounded-full transition-all duration-500\" \n                    style={{ width: `${levelProgress}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-stat-xp\">\n                    {((user as any)?.xp || 0).toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total XP</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-accent\" data-testid=\"text-stat-credits\">\n                    {((user as any)?.ecoCredits || 0).toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">EcoCredits</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-stat-lessons\">\n                    {completedLessons}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Lessons</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-stat-actions\">\n                    {totalActions}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Eco Actions</div>\n                </div>\n              </div>\n\n              {/* Guild Information */}\n              {(user as any)?.guildId && userGuild && (\n                <div className=\"mb-6\">\n                  <h3 className=\"text-lg font-semibold mb-2\">Guild Membership</h3>\n                  <div className=\"bg-muted/50 rounded-lg p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                        <i className=\"fas fa-users text-white\"></i>\n                      </div>\n                      <div>\n                        <div className=\"font-semibold\" data-testid=\"text-profile-guild\">\n                          {(userGuild as any)?.name}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {(userGuild as any)?.memberCount} members\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-2\">\n                <Button variant=\"outline\" data-testid=\"button-edit-profile\">\n                  <i className=\"fas fa-edit mr-2\"></i>\n                  Edit Profile\n                </Button>\n                <Button variant=\"destructive\" onClick={handleLogout} data-testid=\"button-logout\">\n                  <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                  Logout\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Profile Tabs */}\n      <Tabs defaultValue=\"achievements\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"tabs-profile\">\n          <TabsTrigger value=\"achievements\" data-testid=\"tab-achievements\">Achievements</TabsTrigger>\n          <TabsTrigger value=\"progress\" data-testid=\"tab-progress\">Progress</TabsTrigger>\n          <TabsTrigger value=\"eco-actions\" data-testid=\"tab-eco-actions\">Eco Actions</TabsTrigger>\n        </TabsList>\n\n        {/* Achievements Tab */}\n        <TabsContent value=\"achievements\" className=\"mt-8\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold\">Your Achievements</h2>\n              <Badge variant=\"outline\" className=\"text-lg px-3 py-1\" data-testid=\"badge-achievement-count\">\n                {totalAchievements} Unlocked\n              </Badge>\n            </div>\n\n            {achievements && (achievements as any[]).length > 0 ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                {(achievements as any[]).map((achievement: any) => (\n                  <AchievementCard key={achievement.id} achievement={achievement} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-trophy text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-semibold mb-2\">No Achievements Yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Complete lessons and missions to unlock your first achievement!\n                </p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        {/* Progress Tab */}\n        <TabsContent value=\"progress\" className=\"mt-8\">\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Learning Progress</h2>\n            \n            {progress && (progress as any[]).length > 0 ? (\n              <div className=\"space-y-4\">\n                {(progress as any[])\n                  .filter((p: any) => p.completed)\n                  .sort((a: any, b: any) => new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime())\n                  .map((p: any) => (\n                    <Card key={`${p.userId}-${p.lessonId}`} className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-semibold\" data-testid={`text-progress-lesson-${p.lessonId}`}>\n                            Lesson #{p.lessonId}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Completed {new Date(p.completedAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          {p.score && (\n                            <Badge \n                              className={\n                                p.score >= 90 ? \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\" :\n                                p.score >= 80 ? \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\" :\n                                \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"\n                              }\n                              data-testid={`badge-score-${p.lessonId}`}\n                            >\n                              {p.score}%\n                            </Badge>\n                          )}\n                          <i className=\"fas fa-check text-green-600\"></i>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-book-open text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-semibold mb-2\">No Completed Lessons</h3>\n                <p className=\"text-muted-foreground\">\n                  Start learning to see your progress here!\n                </p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        {/* Eco Actions Tab */}\n        <TabsContent value=\"eco-actions\" className=\"mt-8\">\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Your Eco Actions</h2>\n            \n            {ecoActions && (ecoActions as any[]).length > 0 ? (\n              <div className=\"space-y-4\">\n                {(ecoActions as any[]).map((action: any) => (\n                  <Card key={action.id} className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Badge variant=\"outline\" className={\n                            action.type === \"ar_scan\" ? \"bg-primary/10 text-primary\" :\n                            action.type === \"simulation_action\" ? \"bg-secondary/10 text-secondary\" :\n                            \"bg-accent/10 text-accent\"\n                          }>\n                            {action.type.replace('_', ' ').toUpperCase()}\n                          </Badge>\n                          {action.verified && (\n                            <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                              <i className=\"fas fa-check mr-1\"></i>\n                              Verified\n                            </Badge>\n                          )}\n                        </div>\n                        <h4 className=\"font-semibold mb-1\" data-testid={`text-action-description-${action.id}`}>\n                          {action.description}\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(action.createdAt).toLocaleDateString()} at{' '}\n                          {new Date(action.createdAt).toLocaleTimeString()}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-muted-foreground mb-1\">Rewards</div>\n                        <div className=\"flex flex-col space-y-1\">\n                          {action.xpEarned > 0 && (\n                            <span className=\"text-sm font-medium\" data-testid={`text-action-xp-${action.id}`}>\n                              +{action.xpEarned} XP\n                            </span>\n                          )}\n                          {action.creditsEarned > 0 && (\n                            <span className=\"text-sm font-medium text-accent\" data-testid={`text-action-credits-${action.id}`}>\n                              +{action.creditsEarned} Credits\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-leaf text-4xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-semibold mb-2\">No Eco Actions Yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Use the AR scanner or participate in simulations to track your environmental impact!\n                </p>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":15890},"client/src/pages/Simulation.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport SimulationInterface from \"@/components/SimulationInterface\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Simulation() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [isSimulationRunning, setIsSimulationRunning] = useState(false);\n  const [simulationResults, setSimulationResults] = useState<any>(null);\n\n  const saveScenarioMutation = useMutation({\n    mutationFn: async (scenarioData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/eco-actions\", scenarioData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Scenario Saved!\",\n        description: `You earned ${data.xpEarned || 75} XP and ${data.creditsEarned || 15} EcoCredits for creating an environmental scenario.`,\n      });\n    },\n    onError: (error) => {\n      console.error(\"Failed to save scenario:\", error);\n      toast({\n        title: \"Failed to Save Scenario\",\n        description: \"There was an error saving your simulation scenario. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const handleSimulationComplete = (results: any) => {\n    setSimulationResults(results);\n    setIsSimulationRunning(false);\n  };\n\n  const handleSaveScenario = () => {\n    const scenarioData = {\n      type: \"simulation_action\",\n      description: \"Created and saved an environmental simulation scenario\",\n      xpEarned: 75,\n      creditsEarned: 15,\n    };\n    saveScenarioMutation.mutate(scenarioData);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold\">Ecosystem Simulation</h1>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n          Explore the complex relationships within ecosystems. Make changes to environmental \n          factors and observe their real-time impact on biodiversity, climate, and sustainability.\n        </p>\n      </div>\n\n      {/* Simulation Controls */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        <div className=\"lg:col-span-1 space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button \n                onClick={() => setIsSimulationRunning(true)}\n                disabled={isSimulationRunning}\n                className=\"w-full\"\n                data-testid=\"button-start-simulation\"\n              >\n                <i className=\"fas fa-play mr-2\"></i>\n                {isSimulationRunning ? \"Running...\" : \"Start Simulation\"}\n              </Button>\n              \n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-reset-simulation\">\n                <i className=\"fas fa-refresh mr-2\"></i>\n                Reset Environment\n              </Button>\n              \n              <Button \n                variant=\"outline\" \n                className=\"w-full\" \n                data-testid=\"button-save-scenario\"\n                onClick={handleSaveScenario}\n                disabled={saveScenarioMutation.isPending}\n              >\n                <i className=\"fas fa-save mr-2\"></i>\n                {saveScenarioMutation.isPending ? \"Saving...\" : \"Save Scenario\"}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Simulation Presets */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Scenarios</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-scenario-deforestation\">\n                🌳 Deforestation Impact\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-scenario-climate\">\n                🌡️ Climate Change\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-scenario-renewable\">\n                ⚡ Renewable Energy\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-scenario-conservation\">\n                🦋 Conservation Efforts\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Simulation Interface */}\n        <div className=\"lg:col-span-3\">\n          <SimulationInterface \n            isRunning={isSimulationRunning}\n            onComplete={handleSimulationComplete}\n            onStop={() => setIsSimulationRunning(false)}\n          />\n        </div>\n      </div>\n\n      {/* Simulation Results */}\n      {simulationResults && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Simulation Results</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {/* Environmental Impact */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold\">Environmental Impact</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Biodiversity Change</span>\n                    <Badge \n                      className={simulationResults.biodiversityChange >= 0 ? \n                        \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\" :\n                        \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"\n                      }\n                      data-testid=\"badge-biodiversity-change\"\n                    >\n                      {simulationResults.biodiversityChange >= 0 ? \"+\" : \"\"}\n                      {simulationResults.biodiversityChange}%\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Carbon Emissions</span>\n                    <Badge \n                      className={simulationResults.carbonChange <= 0 ? \n                        \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\" :\n                        \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"\n                      }\n                      data-testid=\"badge-carbon-change\"\n                    >\n                      {simulationResults.carbonChange >= 0 ? \"+\" : \"\"}\n                      {simulationResults.carbonChange}%\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Temperature Change</span>\n                    <Badge \n                      className={simulationResults.temperatureChange <= 0 ? \n                        \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\" :\n                        \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\"\n                      }\n                      data-testid=\"badge-temperature-change\"\n                    >\n                      {simulationResults.temperatureChange >= 0 ? \"+\" : \"\"}\n                      {simulationResults.temperatureChange}°C\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {/* Economic Impact */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold\">Economic Impact</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Sustainability Index</span>\n                    <span className=\"font-medium\" data-testid=\"text-sustainability-index\">\n                      {simulationResults.sustainabilityIndex}/100\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Economic Value</span>\n                    <span className=\"font-medium\" data-testid=\"text-economic-value\">\n                      ${simulationResults.economicValue?.toLocaleString() || 0}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Rewards */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold\">Your Rewards</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">XP Earned</span>\n                    <span className=\"font-medium text-primary\" data-testid=\"text-rewards-xp\">\n                      +{simulationResults.xpEarned || 0}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">EcoCredits</span>\n                    <span className=\"font-medium text-accent\" data-testid=\"text-rewards-credits\">\n                      +{simulationResults.creditsEarned || 0}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Educational Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Learn More</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-seedling text-primary text-xl\"></i>\n              </div>\n              <h4 className=\"font-semibold mb-2\">Ecosystem Dynamics</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Understand how species interact and depend on each other in complex ecosystems.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-thermometer-half text-secondary text-xl\"></i>\n              </div>\n              <h4 className=\"font-semibold mb-2\">Climate Impact</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Explore how temperature and weather changes affect biodiversity and habitats.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-industry text-accent text-xl\"></i>\n              </div>\n              <h4 className=\"font-semibold mb-2\">Human Activities</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                See the real impact of deforestation, pollution, and urban development.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-leaf text-primary text-xl\"></i>\n              </div>\n              <h4 className=\"font-semibold mb-2\">Conservation</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Discover how conservation efforts can restore and protect ecosystems.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12723},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/AdvancedEcosystemCanvas.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface AdvancedEcosystemCanvasProps {\n  simulationState: {\n    co2Levels: number;\n    forestCover: number;\n    temperature: number;\n    renewableEnergy: number;\n    population: number;\n    industryLevel: number;\n  };\n  metrics: {\n    speciesCount: number;\n    airQuality: string;\n    carbonStorage: number;\n    biodiversityIndex: number;\n    sustainabilityScore: number;\n  };\n  isRunning: boolean;\n}\n\ninterface EcosystemElement {\n  x: number;\n  y: number;\n  type: 'tree' | 'animal' | 'renewable' | 'industry';\n  health: number;\n  age: number;\n  size: number;\n  color: string;\n  animationOffset: number;\n  subtype?: 'wind' | 'solar'; // For renewable energy deterministic rendering\n}\n\ninterface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  maxLife: number;\n  color: string;\n  size: number;\n  type: 'pollution' | 'clean';\n}\n\nexport default function AdvancedEcosystemCanvas({\n  simulationState,\n  metrics,\n  isRunning\n}: AdvancedEcosystemCanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number | null>(null);\n  const elementsRef = useRef<EcosystemElement[]>([]);\n  const particlesRef = useRef<Particle[]>([]);\n  const frameCountRef = useRef(0);\n  const groundTextureRef = useRef<HTMLCanvasElement | null>(null);\n  \n  // Refs to avoid stale closures in animation loop\n  const simulationStateRef = useRef(simulationState);\n  const metricsRef = useRef(metrics);\n  \n  // Particle pool for performance\n  const maxParticles = 100;\n\n  // Update refs to avoid stale closures\n  useEffect(() => {\n    simulationStateRef.current = simulationState;\n    metricsRef.current = metrics;\n  }, [simulationState, metrics]);\n\n  // Initialize ecosystem elements based on current state\n  const initializeElements = () => {\n    const elements: EcosystemElement[] = [];\n    \n    // Trees based on forest cover\n    const treeCount = Math.floor((simulationState.forestCover / 100) * 30);\n    for (let i = 0; i < treeCount; i++) {\n      elements.push({\n        x: Math.random() * 780 + 10,\n        y: Math.random() * 200 + 200,\n        type: 'tree',\n        health: calculateTreeHealth(),\n        age: Math.random() * 100,\n        size: Math.random() * 15 + 15,\n        color: getTreeColor(),\n        animationOffset: Math.random() * Math.PI * 2\n      });\n    }\n\n    // Animals based on biodiversity\n    const animalCount = Math.floor((metrics.biodiversityIndex / 100) * 15);\n    for (let i = 0; i < animalCount; i++) {\n      elements.push({\n        x: Math.random() * 780 + 10,\n        y: Math.random() * 100 + 250,\n        type: 'animal',\n        health: calculateAnimalHealth(),\n        age: Math.random() * 50,\n        size: Math.random() * 8 + 5,\n        color: getAnimalColor(),\n        animationOffset: Math.random() * Math.PI * 2\n      });\n    }\n\n    // Renewable energy sources\n    const renewableCount = Math.floor((simulationState.renewableEnergy / 100) * 8);\n    for (let i = 0; i < renewableCount; i++) {\n      elements.push({\n        x: Math.random() * 780 + 10,\n        y: Math.random() * 150 + 100,\n        type: 'renewable',\n        health: 1,\n        age: 0,\n        size: 20,\n        color: '#3b82f6',\n        animationOffset: Math.random() * Math.PI * 2,\n        subtype: i % 2 === 0 ? 'wind' : 'solar' // Deterministic alternating types\n      });\n    }\n\n    // Industry sources\n    const industryCount = Math.floor((simulationState.industryLevel / 100) * 6);\n    for (let i = 0; i < industryCount; i++) {\n      elements.push({\n        x: Math.random() * 780 + 10,\n        y: Math.random() * 120 + 150,\n        type: 'industry',\n        health: 1,\n        age: 0,\n        size: 25,\n        color: '#6b7280',\n        animationOffset: 0\n      });\n    }\n\n    elementsRef.current = elements;\n  };\n\n  const calculateTreeHealth = (): number => {\n    const tempFactor = Math.max(0, 2 - simulationState.temperature) / 2;\n    const co2Factor = Math.max(0, (450 - simulationState.co2Levels) / 100);\n    return Math.min(1, (tempFactor + co2Factor) / 2);\n  };\n\n  const calculateAnimalHealth = (): number => {\n    const biodiversityFactor = metrics.biodiversityIndex / 100;\n    const tempFactor = Math.max(0, (3 - Math.abs(simulationState.temperature - 1)) / 3);\n    return Math.min(1, (biodiversityFactor + tempFactor) / 2);\n  };\n\n  const getTreeColor = (): string => {\n    const health = calculateTreeHealth();\n    if (health > 0.8) return '#22c55e'; // Vibrant green\n    if (health > 0.6) return '#65a30d'; // Yellow-green\n    if (health > 0.4) return '#ca8a04'; // Yellow\n    return '#dc2626'; // Red (unhealthy)\n  };\n\n  const getAnimalColor = (): string => {\n    const colors = ['#ef4444', '#3b82f6', '#10b981', '#f59e0b', '#8b5cf6'];\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n\n  const getSkyColor = (): string => {\n    const pollution = (simulationStateRef.current.co2Levels - 350) / 150;\n    if (pollution > 0.7) return '#b8860b'; // Heavily polluted\n    if (pollution > 0.4) return '#dda0dd'; // Moderately polluted\n    if (pollution > 0.2) return '#f0e68c'; // Slightly polluted\n    return '#87ceeb'; // Clean sky\n  };\n\n  // Precompute ground texture once\n  const createGroundTexture = (width: number, height: number) => {\n    if (groundTextureRef.current) return groundTextureRef.current;\n    \n    const groundCanvas = document.createElement('canvas');\n    groundCanvas.width = width;\n    groundCanvas.height = height * 0.3;\n    const groundCtx = groundCanvas.getContext('2d')!;\n    \n    // Ground gradient\n    const groundGradient = groundCtx.createLinearGradient(0, 0, 0, groundCanvas.height);\n    groundGradient.addColorStop(0, '#84cc16');\n    groundGradient.addColorStop(1, '#365314');\n    \n    groundCtx.fillStyle = groundGradient;\n    groundCtx.fillRect(0, 0, groundCanvas.width, groundCanvas.height);\n\n    // Add static texture to the ground (precomputed once)\n    groundCtx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    for (let i = 0; i < 20; i++) {\n      const x = Math.random() * groundCanvas.width;\n      const y = Math.random() * groundCanvas.height;\n      groundCtx.fillRect(x, y, 2, 1);\n    }\n    \n    groundTextureRef.current = groundCanvas;\n    return groundCanvas;\n  };\n\n  const drawBackground = (ctx: CanvasRenderingContext2D, width: number, height: number) => {\n    // Sky gradient\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, height * 0.7);\n    skyGradient.addColorStop(0, getSkyColor());\n    skyGradient.addColorStop(1, '#e0f2fe');\n    \n    ctx.fillStyle = skyGradient;\n    ctx.fillRect(0, 0, width, height * 0.7);\n\n    // Draw precomputed ground texture\n    const groundTexture = createGroundTexture(width, height);\n    ctx.drawImage(groundTexture, 0, height * 0.7);\n  };\n\n  const drawTree = (ctx: CanvasRenderingContext2D, element: EcosystemElement) => {\n    const swayAmount = Math.sin(frameCountRef.current * 0.02 + element.animationOffset) * 2;\n    \n    ctx.save();\n    ctx.translate(element.x + swayAmount, element.y);\n    \n    // Tree trunk\n    ctx.fillStyle = '#8b4513';\n    ctx.fillRect(-3, 0, 6, 25);\n    \n    // Tree crown - size and color based on health\n    ctx.fillStyle = element.color;\n    ctx.globalAlpha = 0.7 + element.health * 0.3;\n    ctx.beginPath();\n    ctx.arc(0, -10, element.size * element.health, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.restore();\n  };\n\n  const drawAnimal = (ctx: CanvasRenderingContext2D, element: EcosystemElement) => {\n    // Animals move in gentle patterns\n    const moveX = Math.sin(frameCountRef.current * 0.01 + element.animationOffset) * 20;\n    const moveY = Math.cos(frameCountRef.current * 0.015 + element.animationOffset) * 5;\n    \n    ctx.save();\n    ctx.translate(element.x + moveX, element.y + moveY);\n    \n    // Simple animal body\n    ctx.fillStyle = element.color;\n    ctx.globalAlpha = element.health;\n    ctx.beginPath();\n    ctx.arc(0, 0, element.size, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Eyes\n    ctx.fillStyle = '#000';\n    ctx.globalAlpha = 1;\n    ctx.beginPath();\n    ctx.arc(-3, -2, 1, 0, Math.PI * 2);\n    ctx.arc(3, -2, 1, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.restore();\n  };\n\n  const drawRenewableEnergy = (ctx: CanvasRenderingContext2D, element: EcosystemElement) => {\n    ctx.save();\n    ctx.translate(element.x, element.y);\n    \n    // Rotating wind turbine or solar panel\n    const rotation = frameCountRef.current * 0.05 + element.animationOffset;\n    \n    if (element.subtype === 'wind') {\n      // Wind turbine\n      ctx.rotate(rotation);\n      ctx.strokeStyle = element.color;\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.moveTo(0, -20);\n      ctx.lineTo(0, 20);\n      ctx.stroke();\n      \n      // Blades\n      ctx.strokeStyle = '#e5e7eb';\n      ctx.lineWidth = 2;\n      for (let i = 0; i < 3; i++) {\n        ctx.save();\n        ctx.rotate((i * Math.PI * 2) / 3);\n        ctx.beginPath();\n        ctx.moveTo(0, -20);\n        ctx.lineTo(0, -35);\n        ctx.stroke();\n        ctx.restore();\n      }\n    } else {\n      // Solar panel\n      ctx.fillStyle = '#1e40af';\n      ctx.fillRect(-15, -8, 30, 16);\n      ctx.strokeStyle = '#3b82f6';\n      ctx.lineWidth = 1;\n      for (let i = -12; i <= 12; i += 6) {\n        ctx.beginPath();\n        ctx.moveTo(i, -8);\n        ctx.lineTo(i, 8);\n        ctx.stroke();\n      }\n    }\n    \n    ctx.restore();\n  };\n\n  const drawIndustry = (ctx: CanvasRenderingContext2D, element: EcosystemElement) => {\n    ctx.save();\n    ctx.translate(element.x, element.y);\n    \n    // Factory building\n    ctx.fillStyle = element.color;\n    ctx.fillRect(-20, -15, 40, 30);\n    \n    // Smokestacks\n    ctx.fillStyle = '#4b5563';\n    ctx.fillRect(-15, -25, 8, 15);\n    ctx.fillRect(7, -25, 8, 15);\n    \n    // Windows\n    ctx.fillStyle = '#fbbf24';\n    ctx.fillRect(-10, -10, 6, 6);\n    ctx.fillRect(4, -10, 6, 6);\n    \n    ctx.restore();\n  };\n\n  const updateParticles = () => {\n    // Add pollution particles from industry (with particle pooling)\n    const industries = elementsRef.current.filter(el => el.type === 'industry');\n    industries.forEach(industry => {\n      if (Math.random() < 0.2 && particlesRef.current.length < maxParticles) { // Reduced spawn rate and added limit\n        particlesRef.current.push({\n          x: industry.x + (Math.random() - 0.5) * 20,\n          y: industry.y - 25,\n          vx: (Math.random() - 0.5) * 2,\n          vy: -Math.random() * 2 - 1,\n          life: 0,\n          maxLife: 120,\n          color: '#6b7280',\n          size: Math.random() * 4 + 2,\n          type: 'pollution'\n        });\n      }\n    });\n\n    // Add clean particles from renewable energy (with particle pooling)\n    const renewables = elementsRef.current.filter(el => el.type === 'renewable');\n    renewables.forEach(renewable => {\n      if (Math.random() < 0.1 && particlesRef.current.length < maxParticles) { // Reduced spawn rate and added limit\n        particlesRef.current.push({\n          x: renewable.x + (Math.random() - 0.5) * 10,\n          y: renewable.y,\n          vx: (Math.random() - 0.5) * 1,\n          vy: -Math.random() * 1 - 0.5,\n          life: 0,\n          maxLife: 80,\n          color: '#10b981',\n          size: Math.random() * 3 + 1,\n          type: 'clean'\n        });\n      }\n    });\n\n    // Update existing particles\n    particlesRef.current = particlesRef.current.filter(particle => {\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n      particle.life++;\n      \n      return particle.life < particle.maxLife;\n    });\n  };\n\n  const drawParticles = (ctx: CanvasRenderingContext2D) => {\n    particlesRef.current.forEach(particle => {\n      const alpha = 1 - (particle.life / particle.maxLife);\n      ctx.fillStyle = particle.color;\n      ctx.globalAlpha = alpha * 0.7;\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n      ctx.fill();\n    });\n    ctx.globalAlpha = 1;\n  };\n\n  const animate = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw background\n    drawBackground(ctx, canvas.width, canvas.height);\n\n    // Update and draw particles if simulation is running\n    if (isRunning) {\n      updateParticles();\n      frameCountRef.current += 1;\n    }\n\n    // Draw ecosystem elements\n    elementsRef.current.forEach(element => {\n      switch (element.type) {\n        case 'tree':\n          drawTree(ctx, element);\n          break;\n        case 'animal':\n          drawAnimal(ctx, element);\n          break;\n        case 'renewable':\n          drawRenewableEnergy(ctx, element);\n          break;\n        case 'industry':\n          drawIndustry(ctx, element);\n          break;\n      }\n    });\n\n    // Draw particles\n    drawParticles(ctx);\n\n    // Only continue animation if still running\n    if (isRunning) {\n      animationRef.current = requestAnimationFrame(animate);\n    }\n  };\n\n  // Initialize elements when simulation state changes\n  useEffect(() => {\n    initializeElements();\n  }, [simulationState, metrics]);\n\n  // Start/stop animation\n  useEffect(() => {\n    if (canvasRef.current && isRunning) {\n      animate();\n    } else if (!isRunning && animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [isRunning]);\n\n  return (\n    <div className=\"relative border rounded-lg overflow-hidden bg-gradient-to-b from-blue-100 to-green-100 dark:from-blue-900/20 dark:to-green-900/20\">\n      <canvas \n        ref={canvasRef}\n        width={800}\n        height={400}\n        className=\"w-full h-full\"\n        data-testid=\"canvas-ecosystem-simulation\"\n      />\n      \n      {/* Overlay information */}\n      <div className=\"absolute top-4 left-4 bg-black/70 text-white p-3 rounded-lg text-sm\">\n        <div className=\"space-y-1\">\n          <div>Species: {metrics.speciesCount}</div>\n          <div>Biodiversity: {metrics.biodiversityIndex}%</div>\n          <div>Air Quality: {metrics.airQuality}</div>\n          <div>Temperature: +{simulationState.temperature}°C</div>\n        </div>\n      </div>\n      \n      {/* Performance indicator */}\n      {isRunning && (\n        <div className=\"absolute top-4 right-4 bg-green-500/80 text-white px-2 py-1 rounded text-xs\">\n          Simulating... ({frameCountRef.current} frames)\n        </div>\n      )}\n      \n      {/* Legend */}\n      <div className=\"absolute bottom-4 right-4 bg-black/70 text-white p-3 rounded-lg text-xs\">\n        <div className=\"grid grid-cols-2 gap-2\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n            <span>Trees</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n            <span>Animals</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-blue-400 rounded-full\"></div>\n            <span>Renewable</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-gray-500 rounded-full\"></div>\n            <span>Industry</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15387},"client/src/components/BlockchainWallet.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Wallet, Coins, Shield, ExternalLink, Trophy, Zap } from 'lucide-react';\n\n// Import blockchain service (this would be available on client-side)\nconst detectEthereumProvider = async () => {\n  if (typeof window !== 'undefined' && (window as any).ethereum) {\n    return (window as any).ethereum;\n  }\n  return null;\n};\n\ninterface WalletInfo {\n  address: string;\n  balance: number;\n  polygonCredits: number;\n  connected: boolean;\n}\n\nexport function BlockchainWallet() {\n  const [walletInfo, setWalletInfo] = useState<WalletInfo | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch user's blockchain data\n  const { data: transactions = [] } = useQuery({\n    queryKey: ['/api/blockchain/transactions'],\n    enabled: !!walletInfo?.connected,\n  });\n\n  const { data: nfts = [] } = useQuery({\n    queryKey: ['/api/blockchain/nfts'],\n    enabled: !!walletInfo?.connected,\n  });\n\n  const { data: pools = [] } = useQuery({\n    queryKey: ['/api/blockchain/pools'],\n  });\n\n  // Connect wallet mutation\n  const connectWalletMutation = useMutation({\n    mutationFn: async (walletAddress: string) => {\n      const response = await apiRequest('POST', '/api/blockchain/connect-wallet', {\n        walletAddress,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Wallet Connected!',\n        description: 'Your MetaMask wallet has been connected successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard'] });\n    },\n    onError: () => {\n      toast({\n        title: 'Connection Failed',\n        description: 'Failed to connect wallet. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Mint credits mutation (demo)\n  const mintCreditsMutation = useMutation({\n    mutationFn: async (amount: number) => {\n      // This would actually interact with blockchain\n      const mockTxHash = `0x${Math.random().toString(16).substring(2, 66)}`;\n      const response = await apiRequest('POST', '/api/blockchain/mint-credits', {\n        amount,\n        transactionHash: mockTxHash,\n        toAddress: walletInfo?.address,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Credits Minted!',\n        description: 'EcoCredits have been minted to your wallet.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/blockchain/transactions'] });\n    },\n  });\n\n  // Connect to MetaMask\n  const connectWallet = async () => {\n    setIsConnecting(true);\n    try {\n      const ethereum = await detectEthereumProvider();\n      \n      if (!ethereum) {\n        toast({\n          title: 'MetaMask Required',\n          description: 'Please install MetaMask to use blockchain features.',\n          variant: 'destructive',\n        });\n        return;\n      }\n\n      // Request account access\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      if (accounts.length > 0) {\n        const address = accounts[0];\n        \n        // Connect to backend\n        await connectWalletMutation.mutateAsync(address);\n        \n        setWalletInfo({\n          address,\n          balance: 0, // Would fetch real balance\n          polygonCredits: 0,\n          connected: true,\n        });\n      }\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      toast({\n        title: 'Connection Failed',\n        description: 'Failed to connect to MetaMask.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Check if already connected\n  useEffect(() => {\n    const checkConnection = async () => {\n      const ethereum = await detectEthereumProvider();\n      if (ethereum) {\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n        if (accounts.length > 0) {\n          setWalletInfo({\n            address: accounts[0],\n            balance: 0,\n            polygonCredits: 0,\n            connected: true,\n          });\n        }\n      }\n    };\n    checkConnection();\n  }, []);\n\n  if (!walletInfo?.connected) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\" data-testid=\"wallet-connect-card\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-4\">\n            <Wallet className=\"h-6 w-6 text-white\" />\n          </div>\n          <CardTitle>Connect Your Wallet</CardTitle>\n          <CardDescription>\n            Connect your MetaMask wallet to earn real EcoCredits on Polygon blockchain\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Button \n            onClick={connectWallet}\n            disabled={isConnecting}\n            className=\"w-full\"\n            data-testid=\"button-connect-wallet\"\n          >\n            {isConnecting ? 'Connecting...' : 'Connect MetaMask'}\n          </Button>\n          \n          <div className=\"mt-4 space-y-2 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"h-4 w-4\" />\n              <span>Secure wallet connection</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Coins className=\"h-4 w-4\" />\n              <span>Earn real cryptocurrency rewards</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Trophy className=\"h-4 w-4\" />\n              <span>Collect NFT certificates</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"wallet-dashboard\">\n      {/* Wallet Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Wallet className=\"h-5 w-5\" />\n            Blockchain Wallet\n          </CardTitle>\n          <CardDescription>\n            Connected to Polygon Mumbai Testnet\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"text-sm text-muted-foreground\">Wallet Address</div>\n              <div className=\"font-mono text-sm\" data-testid=\"text-wallet-address\">\n                {walletInfo.address.slice(0, 6)}...{walletInfo.address.slice(-4)}\n              </div>\n            </div>\n            \n            <Separator />\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <div className=\"text-sm text-muted-foreground\">MATIC Balance</div>\n                <div className=\"text-lg font-semibold\" data-testid=\"text-matic-balance\">\n                  {walletInfo.balance.toFixed(4)} MATIC\n                </div>\n              </div>\n              <div>\n                <div className=\"text-sm text-muted-foreground\">EcoCredits</div>\n                <div className=\"text-lg font-semibold text-green-600\" data-testid=\"text-polygon-credits\">\n                  {walletInfo.polygonCredits} ECO\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Blockchain Actions</CardTitle>\n          <CardDescription>\n            Interact with the Polygon blockchain\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            <Button \n              onClick={() => mintCreditsMutation.mutate(10)}\n              disabled={mintCreditsMutation.isPending}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-mint-credits\"\n            >\n              <Zap className=\"h-4 w-4\" />\n              {mintCreditsMutation.isPending ? 'Minting...' : 'Mint 10 Credits (Demo)'}\n            </Button>\n            \n            <Button \n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-view-polygon\"\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n              View on PolygonScan\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Transactions */}\n      {Array.isArray(transactions) && transactions.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Transactions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {transactions.slice(0, 5).map((tx: any) => (\n                <div key={tx.id} className=\"flex items-center justify-between p-3 border rounded\">\n                  <div>\n                    <div className=\"font-medium\">{tx.transactionType?.replace('_', ' ') || 'Unknown'}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {tx.transactionHash?.slice(0, 10) || ''}...\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium\">{tx.amount || 0} ECO</div>\n                    <Badge variant={tx.status === 'confirmed' ? 'default' : 'secondary'}>\n                      {tx.status || 'pending'}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* NFT Certificates */}\n      {Array.isArray(nfts) && nfts.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Trophy className=\"h-5 w-5\" />\n              NFT Certificates\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {nfts.map((nft: any) => (\n                <div key={nft.id} className=\"border rounded-lg p-4\" data-testid={`nft-${nft.id}`}>\n                  <div className=\"font-medium\">{nft.title || 'Untitled NFT'}</div>\n                  <div className=\"text-sm text-muted-foreground\">{nft.description || 'No description'}</div>\n                  <Badge className=\"mt-2\">{nft.nftType || 'achievement'}</Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10914},"client/src/components/TensorflowARScanner.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport * as tf from '@tensorflow/tfjs';\nimport '@tensorflow/tfjs-backend-webgl';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface DetectionResult {\n  className: string;\n  confidence: number;\n  category: 'plant' | 'recyclable' | 'other';\n}\n\nexport default function TensorflowARScanner() {\n  const [isScanning, setIsScanning] = useState(false);\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [detectionResults, setDetectionResults] = useState<DetectionResult[]>([]);\n  const [isModelLoading, setIsModelLoading] = useState(false);\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  const [isVideoReady, setIsVideoReady] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const modelRef = useRef<any>(null);\n  const cocoModelRef = useRef<any>(null);\n  const { toast } = useToast();\n\n  const scanMutation = useMutation({\n    mutationFn: async (detectionData: { type: string; confidence: number; details: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/eco-actions\", {\n        type: \"ar_scan\",\n        description: `TensorFlow AR Scan: ${detectionData.type} (${Math.round(detectionData.confidence * 100)}% confidence) - ${detectionData.details}`,\n        // Let server compute rewards based on confidence\n        confidence: detectionData.confidence,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"AI Detection Successful!\",\n        description: `You earned ${data.xpEarned} XP and ${data.creditsEarned} EcoCredits`,\n      });\n      // Invalidate cache to refresh dashboard data\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/leaderboard'] });\n      stopCamera();\n    },\n    onError: () => {\n      toast({\n        title: \"Scan Failed\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n      stopCamera();\n    },\n  });\n\n  // Load TensorFlow.js models\n  useEffect(() => {\n    const loadModels = async () => {\n      try {\n        setIsModelLoading(true);\n        \n        // Set WebGL backend for better performance\n        await tf.setBackend('webgl');\n        await tf.ready();\n        console.log('TensorFlow.js is ready with WebGL backend!');\n        \n        // Load MobileNet for general image classification (lighter model)\n        modelRef.current = await mobilenet.load({ version: 2, alpha: 0.5 });\n        console.log('MobileNet model loaded');\n        \n        // Load COCO-SSD for object detection\n        cocoModelRef.current = await cocoSsd.load();\n        console.log('COCO-SSD model loaded');\n        \n        setIsModelLoading(false);\n      } catch (error) {\n        console.error('Error loading models:', error);\n        setIsModelLoading(false);\n        toast({\n          title: \"Model Loading Failed\",\n          description: \"AI models couldn't be loaded. Using fallback detection.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    loadModels();\n  }, [toast]);\n\n  const startCamera = async () => {\n    try {\n      // First check if camera is available\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        throw new Error('Camera not supported in this browser');\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { \n          facingMode: 'environment',\n          width: { ideal: 640 },\n          height: { ideal: 480 }\n        }\n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        streamRef.current = stream;\n        setIsCameraActive(true);\n        setIsScanning(true);\n        setHasSubmitted(false);\n        setIsVideoReady(false);\n        \n        // Wait for video to be ready\n        videoRef.current.onloadedmetadata = () => {\n          setIsVideoReady(true);\n          toast({\n            title: \"Camera Ready!\",\n            description: \"Point your camera at plants or recyclable objects to scan\",\n          });\n        };\n      }\n    } catch (error: any) {\n      console.error('Error accessing camera:', error);\n      let errorMessage = \"Please allow camera access to use AR scanning\";\n      \n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n        errorMessage = \"Camera permission denied. Please enable camera access in your browser settings.\";\n      } else if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\n        errorMessage = \"No camera found. Please ensure your device has a working camera.\";\n      } else if (error.name === 'NotSupportedError' || error.name === 'ConstraintNotSatisfiedError') {\n        errorMessage = \"Camera not supported or constraints not satisfied.\";\n      }\n      \n      toast({\n        title: \"Camera Access Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      setIsScanning(false);\n    }\n  };\n\n  const stopCamera = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    setIsCameraActive(false);\n    setIsScanning(false);\n    setDetectionResults([]);\n    setHasSubmitted(false);\n    setIsVideoReady(false);\n  };\n\n  const classifyEnvironmentalObject = (predictions: any[]): DetectionResult[] => {\n    const environmentalKeywords = {\n      plant: ['plant', 'flower', 'tree', 'leaf', 'grass', 'fern', 'succulent', 'mushroom', 'moss', 'vine', 'herb', 'shrub', 'weed', 'daisy', 'rose', 'tulip', 'sunflower'],\n      recyclable: ['bottle', 'can', 'plastic', 'glass', 'paper', 'cardboard', 'aluminum', 'metal', 'container', 'bag', 'cup', 'box', 'carton', 'tin']\n    };\n\n    return predictions.map(pred => {\n      const className = pred.className || pred.class;\n      const confidence = pred.probability || pred.score;\n      const lowerClassName = className.toLowerCase();\n      \n      let category: 'plant' | 'recyclable' | 'other' = 'other';\n      \n      if (environmentalKeywords.plant.some(keyword => lowerClassName.includes(keyword))) {\n        category = 'plant';\n      } else if (environmentalKeywords.recyclable.some(keyword => lowerClassName.includes(keyword))) {\n        category = 'recyclable';\n      }\n      \n      return {\n        className,\n        confidence,\n        category\n      };\n    });\n  };\n\n  const performDetection = async () => {\n    if (!videoRef.current || !canvasRef.current || !modelRef.current || !cocoModelRef.current || \n        !isVideoReady || hasSubmitted || scanMutation.isPending) {\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx || video.videoWidth === 0 || video.videoHeight === 0) return;\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw current video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    try {\n      // Run both models\n      const [mobileNetPredictions, cocoDetections] = await Promise.all([\n        modelRef.current.classify(canvas),\n        cocoModelRef.current.detect(canvas)\n      ]);\n\n      // Classify predictions\n      const mobileNetResults = classifyEnvironmentalObject(mobileNetPredictions.slice(0, 3));\n      const cocoResults = classifyEnvironmentalObject(cocoDetections.slice(0, 3));\n\n      // Combine and deduplicate results\n      const allResults = [...mobileNetResults, ...cocoResults];\n      const uniqueResults = allResults.filter((result, index, self) => \n        index === self.findIndex(r => r.className === result.className)\n      );\n\n      // Sort by confidence and take top results\n      const topResults = uniqueResults\n        .sort((a, b) => b.confidence - a.confidence)\n        .slice(0, 3);\n\n      setDetectionResults(topResults);\n\n      // If we found environmental objects with good confidence, complete the scan\n      const environmentalDetections = topResults.filter(r => \n        (r.category === 'plant' || r.category === 'recyclable') && r.confidence > 0.3\n      );\n\n      if (environmentalDetections.length > 0 && !hasSubmitted) {\n        setHasSubmitted(true);\n        const bestDetection = environmentalDetections[0];\n        const details = topResults.map(r => `${r.className} (${Math.round(r.confidence * 100)}%)`).join(', ');\n        \n        scanMutation.mutate({\n          type: bestDetection.category === 'plant' ? 'Plant Species' : 'Recyclable Material',\n          confidence: bestDetection.confidence,\n          details: details\n        });\n      }\n    } catch (error) {\n      console.error('Error during detection:', error);\n    }\n  };\n\n  const handleScan = () => {\n    if (isModelLoading) {\n      toast({\n        title: \"Models Loading\",\n        description: \"Please wait for AI models to finish loading\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    startCamera();\n  };\n\n  // Perform detection every 3 seconds when video is ready and scanning\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isScanning && isCameraActive && isVideoReady) {\n      interval = setInterval(performDetection, 3000);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isScanning, isCameraActive, isVideoReady, hasSubmitted]);\n\n  return (\n    <div className=\"space-y-4\">\n      <Button\n        onClick={handleScan}\n        disabled={isScanning || scanMutation.isPending || isModelLoading}\n        className=\"w-full flex items-center justify-between p-3 bg-primary/5 rounded-lg hover:bg-primary/10 transition-colors\"\n        data-testid=\"button-tensorflow-ar-scanner\"\n      >\n        <div className=\"flex items-center space-x-3\">\n          <i className=\"fas fa-camera text-primary\"></i>\n          <span className=\"text-black\">\n            {isModelLoading ? \"Loading AI Models...\" : \n             isScanning ? \"AI Scanning...\" : \"TensorFlow AR Scanner\"}\n          </span>\n        </div>\n        <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n      </Button>\n\n      {isCameraActive && (\n        <div className=\"relative bg-black rounded-lg overflow-hidden\">\n          <video\n            ref={videoRef}\n            autoPlay\n            playsInline\n            muted\n            className=\"w-full h-80 object-cover\"\n          />\n          <canvas\n            ref={canvasRef}\n            className=\"hidden\"\n          />\n          \n          {/* Overlay with detection results */}\n          <div className=\"absolute top-4 left-4 right-4 bg-black/70 text-white p-3 rounded-lg\">\n            <h4 className=\"font-semibold mb-2\">AI Detection Results:</h4>\n            {detectionResults.length > 0 ? (\n              <div className=\"space-y-1 text-sm\">\n                {detectionResults.map((result, index) => (\n                  <div key={index} className=\"flex justify-between items-center\">\n                    <span className={result.category !== 'other' ? 'text-green-300' : 'text-gray-300'}>\n                      {result.className}\n                    </span>\n                    <span className=\"text-xs\">\n                      {Math.round(result.confidence * 100)}%\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-300\">Analyzing image...</p>\n            )}\n          </div>\n\n          {/* Scanning crosshairs */}\n          <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n            <div className=\"w-32 h-32 border-2 border-white border-dashed rounded-lg animate-pulse\">\n              <div className=\"absolute top-0 left-0 w-6 h-6 border-t-4 border-l-4 border-green-400\"></div>\n              <div className=\"absolute top-0 right-0 w-6 h-6 border-t-4 border-r-4 border-green-400\"></div>\n              <div className=\"absolute bottom-0 left-0 w-6 h-6 border-b-4 border-l-4 border-green-400\"></div>\n              <div className=\"absolute bottom-0 right-0 w-6 h-6 border-b-4 border-r-4 border-green-400\"></div>\n            </div>\n          </div>\n\n          {/* Stop button */}\n          <Button\n            onClick={stopCamera}\n            variant=\"destructive\"\n            size=\"sm\"\n            className=\"absolute bottom-4 right-4\"\n            data-testid=\"button-stop-scan\"\n          >\n            <i className=\"fas fa-stop mr-2\"></i>\n            Stop Scan\n          </Button>\n        </div>\n      )}\n\n      {/* Model Loading State */}\n      {((isScanning && !isCameraActive) || isModelLoading) && (\n        <div className=\"bg-gradient-to-b from-blue-500 to-purple-600 rounded-lg p-8 text-center text-white\">\n          <div className=\"relative\">\n            <div className=\"w-16 h-16 border-4 border-white rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-brain text-2xl animate-spin\"></i>\n            </div>\n            <p className=\"text-sm font-medium\">\n              {isModelLoading ? \"Loading TensorFlow.js AI models...\" : \"Initializing camera...\"}\n            </p>\n            <div className=\"mt-3 text-xs opacity-80\">\n              MobileNet & COCO-SSD models loading...\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Camera Permission Instructions */}\n      {!isScanning && !isModelLoading && (\n        <div className=\"bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg p-6 border border-green-200 dark:border-green-800\">\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 bg-green-100 dark:bg-green-800 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <i className=\"fas fa-info text-green-600 dark:text-green-300\"></i>\n            </div>\n            <h4 className=\"font-semibold text-green-800 dark:text-green-200 mb-2\">\n              Ready to Scan!\n            </h4>\n            <p className=\"text-sm text-green-700 dark:text-green-300 mb-4\">\n              Click the scanner button above to start AI-powered environmental object detection.\n              Make sure to allow camera access when prompted.\n            </p>\n            <div className=\"grid grid-cols-2 gap-4 text-xs text-green-600 dark:text-green-400\">\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-leaf\"></i>\n                <span>Detects Plants</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-recycle\"></i>\n                <span>Finds Recyclables</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-trophy\"></i>\n                <span>Earns XP & Credits</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className=\"fas fa-brain\"></i>\n                <span>AI-Powered</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15485},"client/src/pages/Blockchain.tsx":{"content":"import { BlockchainWallet } from '@/components/BlockchainWallet';\n\nexport function Blockchain() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"heading-blockchain\">\n          Blockchain EcoCredits\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Connect your wallet to earn real cryptocurrency rewards and collect NFT certificates\n        </p>\n      </div>\n      \n      <BlockchainWallet />\n    </div>\n  );\n}","size_bytes":534},"server/blockchain.ts":{"content":"import { ethers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport type { InsertBlockchainTransaction, InsertNftCertificate } from '@shared/schema';\n\n// Polygon Mumbai Testnet configuration\nconst POLYGON_MUMBAI_CONFIG = {\n  chainId: 80001,\n  chainName: 'Polygon Mumbai Testnet',\n  nativeCurrency: {\n    name: 'MATIC',\n    symbol: 'MATIC',\n    decimals: 18,\n  },\n  rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n  blockExplorerUrls: ['https://mumbai.polygonscan.com/'],\n};\n\n// EcoCredits Token Contract ABI (simplified ERC20)\nconst ECOCREDITS_ABI = [\n  'function mint(address to, uint256 amount) external',\n  'function burn(address from, uint256 amount) external',\n  'function balanceOf(address account) external view returns (uint256)',\n  'function transfer(address to, uint256 amount) external returns (bool)',\n  'function totalSupply() external view returns (uint256)',\n];\n\n// NFT Certificate Contract ABI (simplified ERC721)\nconst NFT_CERTIFICATE_ABI = [\n  'function mint(address to, string memory tokenURI) external returns (uint256)',\n  'function ownerOf(uint256 tokenId) external view returns (address)',\n  'function tokenURI(uint256 tokenId) external view returns (string)',\n  'function balanceOf(address owner) external view returns (uint256)',\n];\n\nexport class BlockchainService {\n  private provider: ethers.BrowserProvider | null = null;\n  private signer: ethers.Signer | null = null;\n  private ecoCreditsContract: ethers.Contract | null = null;\n  private nftContract: ethers.Contract | null = null;\n\n  // Contract addresses (these would be deployed on Polygon Mumbai)\n  private readonly ECOCREDITS_CONTRACT = '0x1234567890123456789012345678901234567890'; // Placeholder\n  private readonly NFT_CONTRACT = '0x0987654321098765432109876543210987654321'; // Placeholder\n\n  async initialize(): Promise<boolean> {\n    try {\n      // Detect MetaMask or other Web3 provider\n      const ethereum = await detectEthereumProvider();\n      \n      if (!ethereum) {\n        console.warn('No Web3 provider detected. MetaMask is required for blockchain features.');\n        return false;\n      }\n\n      this.provider = new ethers.BrowserProvider(ethereum as any);\n      \n      // Request account access\n      await this.provider.send('eth_requestAccounts', []);\n      \n      // Check if user is on Polygon Mumbai\n      const network = await this.provider.getNetwork();\n      if (Number(network.chainId) !== POLYGON_MUMBAI_CONFIG.chainId) {\n        await this.switchToPolygon();\n      }\n\n      this.signer = await this.provider.getSigner();\n      \n      // Initialize contracts\n      this.ecoCreditsContract = new ethers.Contract(\n        this.ECOCREDITS_CONTRACT,\n        ECOCREDITS_ABI,\n        this.signer\n      );\n\n      this.nftContract = new ethers.Contract(\n        this.NFT_CONTRACT,\n        NFT_CERTIFICATE_ABI,\n        this.signer\n      );\n\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize blockchain service:', error);\n      return false;\n    }\n  }\n\n  async switchToPolygon(): Promise<void> {\n    if (!this.provider) throw new Error('Provider not initialized');\n\n    try {\n      // Try to switch to Polygon Mumbai\n      await this.provider.send('wallet_switchEthereumChain', [\n        { chainId: `0x${POLYGON_MUMBAI_CONFIG.chainId.toString(16)}` }\n      ]);\n    } catch (switchError: any) {\n      // Chain doesn't exist, add it\n      if (switchError.code === 4902) {\n        await this.provider.send('wallet_addEthereumChain', [\n          {\n            chainId: `0x${POLYGON_MUMBAI_CONFIG.chainId.toString(16)}`,\n            chainName: POLYGON_MUMBAI_CONFIG.chainName,\n            nativeCurrency: POLYGON_MUMBAI_CONFIG.nativeCurrency,\n            rpcUrls: POLYGON_MUMBAI_CONFIG.rpcUrls,\n            blockExplorerUrls: POLYGON_MUMBAI_CONFIG.blockExplorerUrls,\n          }\n        ]);\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n  async getWalletAddress(): Promise<string | null> {\n    if (!this.signer) return null;\n    return await this.signer.getAddress();\n  }\n\n  async getEcoCreditsBalance(address: string): Promise<number> {\n    if (!this.ecoCreditsContract) return 0;\n    \n    try {\n      const balance = await this.ecoCreditsContract.balanceOf(address);\n      return parseFloat(ethers.formatEther(balance));\n    } catch (error) {\n      console.error('Failed to get EcoCredits balance:', error);\n      return 0;\n    }\n  }\n\n  async mintEcoCredits(\n    toAddress: string, \n    amount: number\n  ): Promise<InsertBlockchainTransaction | null> {\n    if (!this.ecoCreditsContract || !this.signer) return null;\n\n    try {\n      const amountWei = ethers.parseEther(amount.toString());\n      const tx = await this.ecoCreditsContract.mint(toAddress, amountWei);\n      \n      return {\n        userId: '', // To be filled by caller\n        transactionHash: tx.hash,\n        blockchainNetwork: 'polygon',\n        transactionType: 'mint_credits',\n        amount: amount,\n        status: 'pending',\n        toAddress: toAddress,\n        fromAddress: await this.signer.getAddress(),\n      };\n    } catch (error) {\n      console.error('Failed to mint EcoCredits:', error);\n      return null;\n    }\n  }\n\n  async mintNFTCertificate(\n    toAddress: string,\n    metadata: any\n  ): Promise<{ transaction: InsertBlockchainTransaction; nft: Partial<InsertNftCertificate> } | null> {\n    if (!this.nftContract || !this.signer) return null;\n\n    try {\n      // In a real implementation, you'd upload metadata to IPFS\n      const tokenURI = `data:application/json;base64,${btoa(JSON.stringify(metadata))}`;\n      \n      const tx = await this.nftContract.mint(toAddress, tokenURI);\n      \n      const transaction: InsertBlockchainTransaction = {\n        userId: '', // To be filled by caller\n        transactionHash: tx.hash,\n        blockchainNetwork: 'polygon',\n        transactionType: 'mint_nft',\n        amount: 0,\n        status: 'pending',\n        toAddress: toAddress,\n        fromAddress: await this.signer.getAddress(),\n      };\n\n      const nft: Partial<InsertNftCertificate> = {\n        userId: '', // To be filled by caller\n        tokenId: '', // Will be set after transaction confirmation\n        contractAddress: this.NFT_CONTRACT,\n        nftType: metadata.type || 'achievement',\n        title: metadata.title,\n        description: metadata.description,\n        metadata: metadata,\n        imageUrl: metadata.image,\n        blockchainNetwork: 'polygon',\n        transactionHash: tx.hash,\n      };\n\n      return { transaction, nft };\n    } catch (error) {\n      console.error('Failed to mint NFT certificate:', error);\n      return null;\n    }\n  }\n\n  async waitForTransactionConfirmation(txHash: string): Promise<ethers.TransactionReceipt | null> {\n    if (!this.provider) return null;\n\n    try {\n      return await this.provider.waitForTransaction(txHash);\n    } catch (error) {\n      console.error('Transaction confirmation failed:', error);\n      return null;\n    }\n  }\n\n  async getGasEstimate(transaction: any): Promise<string> {\n    if (!this.provider) return '0';\n\n    try {\n      const gasEstimate = await this.provider.estimateGas(transaction);\n      return ethers.formatEther(gasEstimate);\n    } catch (error) {\n      console.error('Gas estimation failed:', error);\n      return '0';\n    }\n  }\n\n  // Staking functionality for blockchain pools\n  async stakeCredits(poolAddress: string, amount: number): Promise<InsertBlockchainTransaction | null> {\n    if (!this.ecoCreditsContract || !this.signer) return null;\n\n    try {\n      const amountWei = ethers.parseEther(amount.toString());\n      const tx = await this.ecoCreditsContract.transfer(poolAddress, amountWei);\n      \n      return {\n        userId: '', // To be filled by caller\n        transactionHash: tx.hash,\n        blockchainNetwork: 'polygon',\n        transactionType: 'stake_credits',\n        amount: amount,\n        status: 'pending',\n        toAddress: poolAddress,\n        fromAddress: await this.signer.getAddress(),\n      };\n    } catch (error) {\n      console.error('Failed to stake credits:', error);\n      return null;\n    }\n  }\n}\n\n// Singleton instance\nexport const blockchainService = new BlockchainService();","size_bytes":8175},"server/ai-recommendations.ts":{"content":"import OpenAI from 'openai';\nimport { DatabaseStorage } from './storage';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\ninterface UserLearningProfile {\n  userId: string;\n  level: number;\n  totalXP: number;\n  ecoCredits: number;\n  completedLessons: number;\n  averageScore: number;\n  preferredTracks: string[];\n  recentActivity: any[];\n  strengths: string[];\n  improvementAreas: string[];\n}\n\ninterface PersonalizedRecommendation {\n  type: 'lesson' | 'track' | 'action' | 'challenge';\n  title: string;\n  description: string;\n  priority: 'high' | 'medium' | 'low';\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  estimatedTime: string;\n  expectedRewards: {\n    xp: number;\n    credits: number;\n  };\n  reasoning: string;\n}\n\nexport class AIRecommendationEngine {\n  private storage: DatabaseStorage;\n\n  constructor(storage: DatabaseStorage) {\n    this.storage = storage;\n  }\n\n  async generateUserLearningProfile(userId: string): Promise<UserLearningProfile> {\n    try {\n      // Gather user data\n      const user = await this.storage.getUser(userId);\n      const userProgress = await this.storage.getUserProgress(userId);\n      const recentActions = await this.storage.getUserEcoActions(userId);\n      \n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      // Analyze completion patterns\n      const completedLessons = userProgress.filter(p => p.completed);\n      const averageScore = completedLessons.length > 0 \n        ? completedLessons.reduce((sum, p) => sum + (p.score || 0), 0) / completedLessons.length\n        : 0;\n\n      // Determine preferred tracks based on completion rates\n      const trackStats: Record<string, { completed: number; total: number }> = {};\n      for (const progress of userProgress) {\n        const lesson = await this.storage.getLesson(progress.lessonId);\n        if (lesson) {\n          if (!trackStats[lesson.track]) {\n            trackStats[lesson.track] = { completed: 0, total: 0 };\n          }\n          trackStats[lesson.track].total++;\n          if (progress.completed) {\n            trackStats[lesson.track].completed++;\n          }\n        }\n      }\n\n      const preferredTracks = Object.entries(trackStats)\n        .filter(([_, stats]) => stats.completed > 0)\n        .sort(([_, a], [__, b]) => (b.completed / b.total) - (a.completed / a.total))\n        .map(([track, _]) => track);\n\n      // Analyze strengths and improvement areas\n      const strengths: string[] = [];\n      const improvementAreas: string[] = [];\n\n      // High performers (score >= 90)\n      const highScoreTracks = new Set(\n        completedLessons\n          .filter(p => (p.score || 0) >= 90)\n          .map(p => trackStats[Object.keys(trackStats).find(track => {\n            // This is simplified - in real implementation, would need lesson->track mapping\n            return true;\n          }) || ''])\n      );\n\n      // Identify patterns from recent activity\n      const recentActivity = recentActions\n        .filter(a => a.createdAt) // Filter out items with null createdAt\n        .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime())\n        .slice(0, 10);\n\n      return {\n        userId,\n        level: user.level || 1,\n        totalXP: user.xp || 0,\n        ecoCredits: user.ecoCredits || 0,\n        completedLessons: completedLessons.length,\n        averageScore,\n        preferredTracks,\n        recentActivity,\n        strengths: this.determineStrengths(completedLessons, recentActivity),\n        improvementAreas: this.determineImprovementAreas(userProgress, averageScore)\n      };\n    } catch (error) {\n      console.error('Error generating user learning profile:', error);\n      throw error;\n    }\n  }\n\n  async generatePersonalizedRecommendations(userId: string): Promise<PersonalizedRecommendation[]> {\n    try {\n      const profile = await this.generateUserLearningProfile(userId);\n      \n      // Create AI prompt based on user profile\n      const prompt = this.buildRecommendationPrompt(profile);\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an AI tutor specializing in environmental education. Generate 5-7 personalized learning recommendations for users based on their learning profile. Focus on sustainability, conservation, climate change, and environmental action.\n\nResponse format should be a JSON array of recommendations with these fields:\n- type: \"lesson\" | \"track\" | \"action\" | \"challenge\"\n- title: Clear, engaging title\n- description: 2-3 sentence description\n- priority: \"high\" | \"medium\" | \"low\"\n- difficulty: \"beginner\" | \"intermediate\" | \"advanced\"\n- estimatedTime: e.g., \"15 minutes\", \"30 minutes\", \"1 hour\"\n- expectedRewards: { xp: number, credits: number }\n- reasoning: Why this recommendation fits the user\n\nMake recommendations progressive, engaging, and aligned with user's current level and interests.`\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 2000\n      });\n\n      const aiResponse = response.choices[0]?.message?.content;\n      if (!aiResponse) {\n        throw new Error('No response from AI');\n      }\n\n      // Parse AI response\n      try {\n        const recommendations = JSON.parse(aiResponse) as PersonalizedRecommendation[];\n        return this.validateAndEnhanceRecommendations(recommendations, profile);\n      } catch (parseError) {\n        console.error('Error parsing AI response:', parseError);\n        // Fallback to rule-based recommendations\n        return this.generateFallbackRecommendations(profile);\n      }\n    } catch (error) {\n      console.error('Error generating AI recommendations:', error);\n      // Fallback to rule-based recommendations\n      const profile = await this.generateUserLearningProfile(userId);\n      return this.generateFallbackRecommendations(profile);\n    }\n  }\n\n  private buildRecommendationPrompt(profile: UserLearningProfile): string {\n    return `User Learning Profile:\n- Level: ${profile.level}\n- Total XP: ${profile.totalXP}\n- EcoCredits: ${profile.ecoCredits}\n- Completed Lessons: ${profile.completedLessons}\n- Average Score: ${profile.averageScore.toFixed(1)}%\n- Preferred Tracks: ${profile.preferredTracks.join(', ') || 'None yet'}\n- Strengths: ${profile.strengths.join(', ') || 'Developing'}\n- Areas for Improvement: ${profile.improvementAreas.join(', ') || 'None identified'}\n- Recent Activity: ${profile.recentActivity.length} actions in the last week\n\nAvailable learning tracks: Climate Change, Renewable Energy, Waste Management, Conservation, Sustainable Living, Biodiversity\n\nPlease generate personalized recommendations that:\n1. Match the user's current level and experience\n2. Build on their strengths while addressing improvement areas\n3. Introduce new concepts progressively\n4. Include a mix of theoretical learning and practical actions\n5. Encourage continued engagement with appropriate challenges\n\nConsider their preferred tracks but also suggest branching into related areas for well-rounded environmental education.`;\n  }\n\n  private validateAndEnhanceRecommendations(\n    recommendations: PersonalizedRecommendation[], \n    profile: UserLearningProfile\n  ): PersonalizedRecommendation[] {\n    return recommendations.map(rec => ({\n      ...rec,\n      // Adjust rewards based on user level\n      expectedRewards: {\n        xp: Math.max(25, rec.expectedRewards.xp * (1 + profile.level * 0.1)),\n        credits: Math.max(10, rec.expectedRewards.credits * (1 + profile.level * 0.1))\n      }\n    })).filter(rec => \n      // Basic validation\n      rec.title && rec.description && rec.type && rec.priority && rec.difficulty\n    );\n  }\n\n  private generateFallbackRecommendations(profile: UserLearningProfile): PersonalizedRecommendation[] {\n    const recommendations: PersonalizedRecommendation[] = [];\n\n    // Beginner recommendations\n    if (profile.level <= 2) {\n      recommendations.push({\n        type: 'lesson',\n        title: 'Climate Change Basics',\n        description: 'Learn fundamental concepts about global warming, greenhouse gases, and climate science.',\n        priority: 'high',\n        difficulty: 'beginner',\n        estimatedTime: '20 minutes',\n        expectedRewards: { xp: 50, credits: 15 },\n        reasoning: 'Essential foundation knowledge for environmental understanding'\n      });\n    }\n\n    // Progressive recommendations based on completed lessons\n    if (profile.completedLessons >= 3) {\n      recommendations.push({\n        type: 'action',\n        title: 'Start a Home Energy Audit',\n        description: 'Use our AR scanner to identify energy inefficiencies in your home and track improvements.',\n        priority: 'medium',\n        difficulty: 'intermediate',\n        estimatedTime: '45 minutes',\n        expectedRewards: { xp: 75, credits: 25 },\n        reasoning: 'Practical application of energy conservation knowledge'\n      });\n    }\n\n    // High-level challenge for advanced users\n    if (profile.level >= 5) {\n      recommendations.push({\n        type: 'challenge',\n        title: 'Community Carbon Footprint Challenge',\n        description: 'Lead a week-long carbon reduction challenge in your community using our tracking tools.',\n        priority: 'high',\n        difficulty: 'advanced',\n        estimatedTime: '1 week',\n        expectedRewards: { xp: 200, credits: 75 },\n        reasoning: 'Leadership opportunity to multiply environmental impact'\n      });\n    }\n\n    return recommendations;\n  }\n\n  private determineStrengths(completedLessons: any[], recentActivity: any[]): string[] {\n    const strengths: string[] = [];\n    \n    // Analyze high-scoring areas\n    const highScoreCount = completedLessons.filter(l => (l.score || 0) >= 90).length;\n    if (highScoreCount >= 3) {\n      strengths.push('Consistent High Performance');\n    }\n\n    // Analyze activity patterns\n    const arScans = recentActivity.filter(a => a.type === 'ar_scan').length;\n    if (arScans >= 3) {\n      strengths.push('Practical Application');\n    }\n\n    const simulations = recentActivity.filter(a => a.type === 'simulation_action').length;\n    if (simulations >= 2) {\n      strengths.push('Systems Thinking');\n    }\n\n    return strengths.length > 0 ? strengths : ['Building Foundation'];\n  }\n\n  private determineImprovementAreas(userProgress: any[], averageScore: number): string[] {\n    const improvementAreas: string[] = [];\n    \n    if (averageScore < 80) {\n      improvementAreas.push('Concept Mastery');\n    }\n\n    const incompleteCount = userProgress.filter(p => !p.completed).length;\n    if (incompleteCount > 3) {\n      improvementAreas.push('Lesson Completion');\n    }\n\n    return improvementAreas;\n  }\n\n  async getAdaptiveDifficulty(userId: string, contentType: string): Promise<'beginner' | 'intermediate' | 'advanced'> {\n    const profile = await this.generateUserLearningProfile(userId);\n    \n    // Base difficulty on level and average score\n    if (profile.level <= 2 || profile.averageScore < 70) {\n      return 'beginner';\n    } else if (profile.level <= 5 || profile.averageScore < 85) {\n      return 'intermediate';\n    } else {\n      return 'advanced';\n    }\n  }\n}","size_bytes":11256},"client/src/pages/ARScanner.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TensorflowARScanner from \"@/components/TensorflowARScanner\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function ARScanner() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold\">AI-Powered AR Scanner</h1>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n          Use advanced TensorFlow.js AI models to identify plants, recyclable materials, and environmental objects. \n          Earn XP and EcoCredits based on detection accuracy!\n        </p>\n      </div>\n\n      {/* Features Info */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <i className=\"fas fa-leaf text-green-500\"></i>\n              Plant Recognition\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground\">\n              Identify various plant species, flowers, trees, and vegetation using MobileNet AI.\n            </p>\n            <Badge className=\"mt-2 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n              +25-50 XP per detection\n            </Badge>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <i className=\"fas fa-recycle text-blue-500\"></i>\n              Recycling Detection\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground\">\n              Detect recyclable materials like bottles, cans, paper, and plastic items.\n            </p>\n            <Badge className=\"mt-2 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n              +20-40 XP per detection\n            </Badge>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <i className=\"fas fa-brain text-purple-500\"></i>\n              AI Technology\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground\">\n              Powered by TensorFlow.js with MobileNet and COCO-SSD models for accurate detection.\n            </p>\n            <Badge className=\"mt-2 bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\">\n              Real-time AI\n            </Badge>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* AR Scanner Interface */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Start Scanning</CardTitle>\n          <div className=\"text-sm text-muted-foreground space-y-2\">\n            <p>• Point your camera at plants or recyclable objects</p>\n            <p>• Keep the object in the scanning frame for best results</p>\n            <p>• Allow camera permissions when prompted</p>\n            <p>• AI detection happens automatically every 3 seconds</p>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <TensorflowARScanner />\n        </CardContent>\n      </Card>\n\n      {/* How It Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How It Works</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-camera text-primary text-xl\"></i>\n              </div>\n              <h4 className=\"font-semibold mb-2\">1. Activate Camera</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Click the scanner button and grant camera permissions\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-crosshairs text-secondary text-xl\"></i>\n              </div>\n              <h4 className=\"font-semibold mb-2\">2. Point & Focus</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Aim at environmental objects within the scanning frame\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-brain text-accent text-xl\"></i>\n              </div>\n              <h4 className=\"font-semibold mb-2\">3. AI Analysis</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                TensorFlow.js models analyze and classify objects\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-trophy text-primary text-xl\"></i>\n              </div>\n              <h4 className=\"font-semibold mb-2\">4. Earn Rewards</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Get XP and EcoCredits based on detection accuracy\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Technical Details */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Technical Specifications</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-semibold mb-3\">AI Models Used</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <span>MobileNet v2 (α=0.5)</span>\n                  <Badge variant=\"outline\">Image Classification</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>COCO-SSD</span>\n                  <Badge variant=\"outline\">Object Detection</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>WebGL Backend</span>\n                  <Badge variant=\"outline\">Hardware Acceleration</Badge>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-3\">Detection Categories</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Plants & Vegetation</span>\n                  <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                    16+ types\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Recyclable Materials</span>\n                  <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n                    14+ types\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Confidence Threshold</span>\n                  <Badge variant=\"outline\">30%+</Badge>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8482}},"version":1}