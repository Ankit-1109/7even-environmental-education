You are a senior full-stack architect, AR/AI developer, blockchain engineer, and gamification expert. 
Build me a complete end-to-end Environmental Education Webapp that combines cutting-edge 
gamification, AR, blockchain verification, and immersive simulations.

---

## 1. Core Features & Problem Solved
- A gamified environmental education platform where students learn, act, and get rewarded.
- Bridges the gap between theory and practice in sustainability education.
- Verified real-world environmental impact via blockchain EcoCredits.

---

## 2. Database Design
Use a **multi-database system**:
- **MongoDB**: User profiles, lessons, guilds, AR content.
- **PostgreSQL**: Structured gamification data (leaderboards, achievements, missions).
- **Redis**: Real-time leaderboards and sessions.
- **IPFS**: Decentralized storage for environmental impact evidence (photos, certificates, NFTs).

Schemas:
1. Users: {id, name, age, location, ecoTrack, achievements[], EcoCredits, guildId}
2. Lessons: {id, title, track, multimedia, difficulty, language}
3. Guilds: {id, name, members[], challenges[]}
4. Missions: {id, type, status, verified, ecoImpactScore}
5. Leaderboards: {userId, points, rank}
6. Achievements: {id, userId, badgeType, dateEarned}

---

## 3. Backend (Microservices)
Build using **Node.js + Express.js** with **GraphQL**:
1. **User Management Service**: JWT authentication, profiles, progress tracking.
2. **Content Management Service**: CRUD APIs for lessons, multilingual content.
3. **Gamification Engine**: XP, badges, leaderboards (Redis caching).
4. **Impact Verification Service**:
   - Blockchain EcoCredit issuance
   - NFT certificates for contributions
   - GPS + photo/video validation
5. **Notification Service**: Email + push notifications, daily/weekly eco-missions.
6. **Analytics Service**: Real-time dashboards + predictive ML hooks.

---

## 4. Frontend (React.js + Tailwind + PixiJS)
Build as a **Progressive Web App (PWA)**:
- Core screens:
  - Registration/Login
  - Dashboard (EcoExplorer, ClimateChampion, WasteWarrior, GreenInnovator)
  - Profile with EcoCredits & avatars
  - Guild/Team system
  - AR scanning page
  - Leaderboards & challenges
- Features:
  - Dark mode optimization for energy efficiency
  - Multilingual UI (English + placeholders for regional languages)
  - Accessibility compliance (WCAG 2.1)
  - Offline-first architecture with service workers
- Style:
  - Eco-inspired UI
  - Animations via Framer Motion
  - Gamified dynamic badges and avatars

---

## 5. AR & AI Features
Integrate **TensorFlow.js + WebAR** for AR scanning:
1. Plant/Species recognition (iNaturalist datasets)
2. Waste classification (biodegradable, recyclable, hazardous)
3. Real-time AQI overlay on camera feed
4. Educational overlays (fun facts, missions)
5. Offline fallback mode (basic classification)

---

## 6. Simulation Engine (PixiJS/React)
Create an interactive simulation:
- Ecosystem manipulation (deforestation, CO2, water usage, pollution).
- Time-lapse (10+ years simulated in seconds).
- Cause-effect visuals (e.g., deforestation → CO2 rise → species loss).
- Missions mode (e.g., “Reduce CO2 by 20% using renewable energy”).
- Save results to user profile.

---

## 7. Blockchain (EcoCredits System)
Use **Solidity + Polygon (Layer 2)**:
1. Smart contracts:
   - EcoCredit issuance
   - NFT certificates for achievements
   - EcoCredit trading between guilds/schools
2. Integration:
   - Web3.js frontend
   - Node.js backend hooks
   - Store transaction hashes in PostgreSQL
   - Use IPFS for verified environmental evidence

---

## 8. Deployment & Scaling
Use **Docker + Kubernetes + AWS**:
- CI/CD with GitHub Actions
- EKS for microservices
- CloudFront + S3 for static content
- Lambda for serverless functions (AI/AR tasks)
- ELK stack for monitoring/logging
- Security: OWASP compliance, JWT, data encryption, DDoS protection

---

## 9. Gamification & Rewards
- **Tracks**: EcoExplorer, ClimateChampion, WasteWarrior, GreenInnovator
- **Guilds**: Collaborative missions, inter-school competitions
- **Rewards**:
  - EcoCredits
  - Badges + evolving avatars
  - Scholarships, mentorships, internships
- **Leaderboards**: Local, district, state, national

---

## 10. Deliverables
- Database schemas (MongoDB, PostgreSQL, Redis, IPFS)
- Node.js microservices with APIs
- React.js PWA frontend with Tailwind, Framer Motion, PixiJS
- AR module with TensorFlow.js + WebAR
- Simulation engine
- Blockchain smart contracts (Solidity + Polygon)
- Deployment pipeline (Docker, Kubernetes, AWS)

---

## 11. Development Flow
1. Database setup
2. Backend microservices
3. Frontend PWA
4. Gamification engine
5. AR + AI scanning
6. Simulation engine
7. Blockchain EcoCredits
8. Deployment & scaling

---

Now generate the **complete end-to-end system architecture + starter code snippets** 
for each component (database, backend, frontend, AR/AI, blockchain, deployment). 
Make it modular, production-ready, and easy to expand.
